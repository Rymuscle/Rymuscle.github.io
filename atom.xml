<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>rymuscle的技术博客</title>
  
  <subtitle>一切美好都如约而至!</subtitle>
  <link href="http://rymuscle.github.io/atom.xml" rel="self"/>
  
  <link href="http://rymuscle.github.io/"/>
  <updated>2024-04-21T06:19:47.021Z</updated>
  <id>http://rymuscle.github.io/</id>
  
  <author>
    <name>Rymuscle</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>11. 连接的原理</title>
    <link href="http://rymuscle.github.io/2021/11/09/MySQL%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/11.%20%E8%BF%9E%E6%8E%A5%E7%9A%84%E5%8E%9F%E7%90%86/"/>
    <id>http://rymuscle.github.io/2021/11/09/MySQL%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/11.%20%E8%BF%9E%E6%8E%A5%E7%9A%84%E5%8E%9F%E7%90%86/</id>
    <published>2021-11-09T14:10:12.000Z</published>
    <updated>2024-04-21T06:19:47.021Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>搞数据库一个避不开的概念就是<code>Join</code>，翻译成中文就是连接。<br>相信很多小伙伴在初学连接的时候都有些一脸懵逼，理解了连接的语义之后又可能不明白各个表中的记录到底是怎么连起来的，以至于在使用的时候常常陷入下边两种误区:</p><ul><li>误区一:业务至上，管他三七二十一，再复杂的查询也用在一个连接语句中搞定。</li><li>误区二:敬而远之，上次 DBA 那给报过来的慢查询就是因为使用了连接导致的，以后再也不敢用了。<br>所以本章就来扒一扒连接的原理。考虑到一部分小伙伴可能忘了连接是个啥或者压根儿就不知道，为了节省他们百度或者看其他书的宝贵时间以及为了我的书凑字数，我们先来介绍一下 MySQL 中支持的一些连接语法。</li></ul></blockquote><h1 id="连接简介"><a href="#连接简介" class="headerlink" title="连接简介"></a><code>连接</code>简介</h1><p>为了故事的顺利发展，我们先建立 t1、t2 两个简单的表并给它们填充一点数据，这两个表都有两个列，一个是INT类型的，一个是CHAR(1)类型的，填充好数据的两个表⻓这样:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT * FROM t1; </span><br><span class="line">+------+------+</span><br><span class="line">|m1 |n1 | </span><br><span class="line">+------+------+ </span><br><span class="line">|1|a| </span><br><span class="line">|2|b| </span><br><span class="line">|3|c| </span><br><span class="line">+------+------+</span><br><span class="line">3 rows in set (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; SELECT * FROM t2; </span><br><span class="line">+------+------+</span><br><span class="line">|m2 |n2 | </span><br><span class="line">+------+------+ </span><br><span class="line">|2|b| </span><br><span class="line">|3|c| </span><br><span class="line">|4|d| </span><br><span class="line">+------+------+</span><br><span class="line">3 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><p>连接的本质就是把各个连接表中的记录都取出来依次匹配的组合加入结果集并返回给用户。所以我们把t1和t2两个表连接起来的过程如下图所示:<br><img src="/images/MySQL/11/1.png"><br>这个过程看起来就是把t1表的记录和t2的记录连起来组成新的更大的记录，所以这个查询过程称之为 <code>连接查询</code>。<br>连接查询的结果集中包含一个表中的每一条记录与另一个表中的每一条记录相互匹配的组合，像这样的结果集就可以称之为<code>笛卡尔积</code>。<br>因为表t1中有3条记录，表t2中也有3条记录，所以这两个表连接之后的笛卡尔积就有3×3&#x3D;9行记录。<br>在MySQL中，连接查询的语法也很随意，只要在FROM语句后边跟多个表名就好了，比如我们把t1表和t2表连接起来的查询语句可以写成这样:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SELECT * FROM t1, t2; </span><br><span class="line">+------+------+------+------+ </span><br><span class="line">|m1 |n1 |m2 |n2 | </span><br><span class="line">+------+------+------+------+ </span><br><span class="line">|1|a|2|b| </span><br><span class="line">|2|b|2|b| </span><br><span class="line">|3|c|2|b| </span><br><span class="line">|1|a|3|c| </span><br><span class="line">|2|b|3|c| </span><br><span class="line">|3|c|3|c| </span><br><span class="line">|1|a|4|d| </span><br><span class="line">|2|b|4|d| </span><br><span class="line">|3|c|4|d| </span><br><span class="line">+------+------+------+------+ </span><br><span class="line">9 rows in set (0.00 sec)</span><br></pre></td></tr></table></figure><h1 id="连接过程简介"><a href="#连接过程简介" class="headerlink" title="连接过程简介"></a>连接过程简介</h1><p>如果我们乐意，我们可以连接任意数量张表，但是如果没有任何限制条件的话，这些表连接起来产生的笛卡尔积可能是非常巨大的。<br>比方说3个100行记录的表连接起来产生的笛卡尔积就有 100×100×100&#x3D;1000000行数据!<br>所以在连接的时候过滤掉特定<br>记录组合是有必要的，在连接查询中的过滤条件可以分成两种:</p><ul><li>涉及单表的条件<br>这种只涉及单表的过滤条件我们之前都提到过一万遍了，我们之前也一直称为搜索条件，比如t1.m1 &gt; 1是只针对t1表的过滤条件，t2.n2 &lt; ‘d’是只针对t2表的过滤条件。</li><li>涉及两表的条件<br>这种过滤条件我们之前没⻅过，比如t1.m1 &#x3D; t2.m2、t1.n1 &gt; t2.n2等，这些条件中涉及到了两个表，我们稍后会仔细分析这种过滤条件是如何使用的哈。</li></ul><p>下边我们就要看一下携带过滤条件的连接查询的大致执行过程了，比 方说下边这个查询语句:<br><code>SELECT * FROM t1, t2 WHERE t1.m1 &gt; 1 AND t1.m1 = t2.m2 AND t2.n2 &lt; &#39;d&#39;;</code><br>在这个查询中我们指明了这三个过滤条件:<br><code>t1.m1 &gt; 1</code><br><code>t1.m1 = t2.m2</code><br><code>t2.n2 &lt; &#39;d&#39;</code></p><p>那么这个连接查询的大致执行过程如下:</p><ol><li><p>首先确定第一个需要查询的表，这个表称之为驱动表。怎样在 单表中执行查询语句我们在前一章都唠叨过了，只需要选取代 价最小的那种访问方法去执行单表查询语句就好了(就是说从 const、ref、ref_or_null、range、index、all这些执行方法 中选取代价最小的去执行查询)。此处假设使用t1作为驱动 表，那么就需要到t1表中找满足t1.m1 &gt; 1的记录，因为表 中的数据太少，我们也没在表上建立二级索引，所以此处查询 t1表的访问方法就设定为all吧，也就是采用全表扫描的方式 执行单表查询。关于如何提升连接查询的性能我们之后再说， 现在先把基本概念捋清楚哈。所以查询过程就如下图所示:<br><img src="/images/MySQL/11/2.png"><br>我们可以看到，t1表中符合t1.m1 &gt; 1的记录有两条。</p></li><li><p>针对上一步骤中从驱动表产生的结果集中的每一条记录，分别 需要到t2表中查找匹配的记录，所谓匹配的记录，指的是符合 过滤条件的记录。因为是根据t1表中的记录去找t2表中的记 录，所以t2表也可以被称之为被驱动表。上一步骤从驱动表中 得到了2条记录，所以需要查询2次t2表。此时涉及两个表的列 的过滤条件t1.m1 &#x3D; t2.m2就派上用场了:<br>当t1.m1 &#x3D; 2时，过滤条件t1.m1 &#x3D; t2.m2就相当于 t2.m2 &#x3D; 2，所以此时t2表相当于有了t1.m1 &#x3D; 2、t2.n2 &lt; ‘d’这两个过滤条件，然后到t2表中执行 单表查询。<br>当t1.m1 &#x3D; 3时，过滤条件t1.m1 &#x3D; t2.m2就相当于 t2.m2 &#x3D; 3，所以此时t2表相当于有了t1.m1 &#x3D; 3、t2.n2 &lt; ‘d’这两个过滤条件，然后到t2表中执行 单表查询。<br>所以整个连接查询的执行过程就如下图所示:<br><img src="/images/MySQL/11/3.png"><br>也就是说整个连接查询最后的结果只有两条符合过滤条件的记录:</p><p>从上边两个步骤可以看出来，我们上边唠叨的这个两表连接查询共需 要查询1次t1表，2次t2表。当然这是在特定的过滤条件下的结果， 如果我们把t1.m1 &gt; 1这个条件去掉，那么从t1表中查出的记录就 有3条，就需要查询3次t3表了。也就是说在两表连接查询中，驱动 表只需要访问一次，被驱动表可能被访问多次。</p></li></ol><h1 id="内连接和外连接"><a href="#内连接和外连接" class="headerlink" title="内连接和外连接"></a>内连接和外连接</h1><p>为了大家更好理解后边内容，我们先创建两个有现实意义的表，</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE student (</span><br><span class="line">number INT NOT NULL AUTO_INCREMENT COMMENT &#x27;学</span><br><span class="line">号&#x27;,</span><br><span class="line">name VARCHAR(5) COMMENT &#x27;姓名&#x27;, major VARCHAR(30) COMMENT &#x27;专业&#x27;, PRIMARY KEY (number)</span><br><span class="line">) Engine=InnoDB CHARSET=utf8 COMMENT &#x27;学生信息表&#x27;;</span><br><span class="line"></span><br><span class="line">CREATE TABLE score (</span><br><span class="line">number INT COMMENT &#x27;学号&#x27;,</span><br><span class="line">subject VARCHAR(30) COMMENT &#x27;科目&#x27;, score TINYINT COMMENT &#x27;成绩&#x27;, PRIMARY KEY (number, score)</span><br><span class="line">) Engine=InnoDB CHARSET=utf8 COMMENT &#x27;学生成绩表&#x27;;</span><br></pre></td></tr></table></figure><p>我们新建了一个学生信息表，一个学生成绩表，然后我们向上述两个 表中插入一些数据，为节省篇幅，具体插入过程就不唠叨了，插入后 两表中的数据如下:</p><h1 id=""><a href="#" class="headerlink" title=""></a></h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;搞数据库一个避不开的概念就是&lt;code&gt;Join&lt;/code&gt;，翻译成中文就是连接。&lt;br&gt;相信很多小伙伴在初学连</summary>
      
    
    
    
    <category term="MySQL 读书笔记" scheme="http://rymuscle.github.io/categories/MySQL-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="MySQL" scheme="http://rymuscle.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>10. 单表访问方法</title>
    <link href="http://rymuscle.github.io/2021/11/06/MySQL%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/10.0%20TODO%20%E5%8D%95%E8%A1%A8%E8%AE%BF%E9%97%AE%E6%96%B9%E6%B3%95/"/>
    <id>http://rymuscle.github.io/2021/11/06/MySQL%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/10.0%20TODO%20%E5%8D%95%E8%A1%A8%E8%AE%BF%E9%97%AE%E6%96%B9%E6%B3%95/</id>
    <published>2021-11-06T12:21:43.000Z</published>
    <updated>2024-04-21T06:19:47.021Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>对于我们这些MySQL的使用者来说，MySQL其实就是一个软件，平时用的最多的就是查询功能。<br>DBA时不时丢过来一些慢查询语句让优化，我们如果连查询是怎么执行的都不清楚还优化个毛线，所以是时候掌握真正的技术了。<br>我们在第一章的时候就曾说过，MySQL Server有一个称为<code>查询优化器</code>的模块，一条查询语句进行<code>语法解析</code>之后就会被交给<code>查询优化器</code>来进行优化，优化的结果就是生成一个所谓的<code>执行计划</code>，这个<code>执行计划</code>表明了<code>应该使用哪些索引进行查询</code>，<code>表之间的连接顺序是啥样的</code>，最后会按照执行计划中的步骤调用存储引擎提供的方法来真正的执行查询，并将查询结果返回给用户。<br>不过查询优化这个主题有点儿大，在学会跑之前还得先学会走，所以本章先来瞅瞅MySQL怎么执行单表查询(就是FROM子句后边只有一个表，最简单的那种查询~)。</p></blockquote><h1 id="访问方法-access-method-的概念"><a href="#访问方法-access-method-的概念" class="headerlink" title="访问方法(access method)的概念"></a>访问方法(access method)的概念</h1><p>我们平时写的查询语句本质上只是告诉MySQL我们要获取的数据符合哪些规则，至于MySQL背地里是怎么把查询结果搞出来的那是MySQL自己的事儿。<br>对于单个表的查询来说，设计 MySQL 的大叔把查询的执行方式大致分为下边两种:</p><h2 id="使用全表扫描进行查询"><a href="#使用全表扫描进行查询" class="headerlink" title="使用全表扫描进行查询"></a>使用全表扫描进行查询</h2><p>这种执行方式很好理解，就是把表的每一行记录都扫一遍嘛， 把符合搜索条件的记录加入到结果集就完了。不管是啥查询都可以使用这种方式执行，当然，这种也是最笨的执行方式。</p><h2 id="使用索引进行查询"><a href="#使用索引进行查询" class="headerlink" title="使用索引进行查询"></a>使用索引进行查询</h2><p>因为直接使用全表扫描的方式执行查询要遍历好多记录，所以代价可能太大了。如果查询语句中的搜索条件可以使用到某个索引，那直接使用索引来执行查询可能会加快查询执行的时间。</p><p>使用索引来执行查询的方式五花八⻔，又可以细分为许多 种类:</p><ul><li>针对主键或唯一二级索引的等值查询</li><li>针对普通二级索引的等值查询</li><li>针对索引列的范围查询</li><li>直接扫描整个索引</li></ul><p>设计MySQL的大叔把MySQL执行查询语句的方式称之为<code>访问方法</code>或者<code>访问类型</code>。<br>同一个查询语句可能使用多种不同的访问方法来执行，虽然最后的查询结果都是一样的，但是执行的时间可能差老鼻子远了。下边细细道来各种访问方法的具体内容。</p><h2 id="const"><a href="#const" class="headerlink" title="const"></a>const</h2><p>有的时候我们可以通过主键列来定位一条记录，比方说这个查询:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM single_table WHERE id = 1438;</span><br></pre></td></tr></table></figure><p>MySQL会直接利用主键值在<code>聚簇索引</code>中定位对应的用户记录。<br>对于的聚簇索引来说，它对应的B+树叶子节点中的记录就是按照id列排序的。B+树本来就是一个矮矮的大胖子，所以这样根据主键值定位一条记录的速度贼快。类似的，我们根据 <code>唯一二级索引列</code> 来定位一条记录的速度也是贼快的。比如下边这个查询:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM single_table WHERE key2 = 3841;</span><br></pre></td></tr></table></figure><p>不过这个查询的执行会分两步，第一步先从idx_key2对应的B+树索引中根据key2列与常数的等值比较条件定位到一条二级索引记录，然后再根据该记录的id值到聚簇索引中获取到完整的用户记录。</p><p>设计MySQL的大叔认为<code>通过主键或者唯一二级索引列与常数的等值比较</code> 来定位一条记录是像坐火箭一样快的，所以他们把这种通过主键或者唯一二级索引列来定位一条记录的访问方法定义为:const，意思是 <code>常数级别</code> 的，代价是可以忽略不计的。<br>不过这种const访问方法 <strong>只能在<code>主键列或者唯一二级索引列和一个常数进行等值比较时才有效</code></strong> ， 如果主键或者唯一二级索引是由多个列构成的话，索引中的每一个列都需要与常数进行等值比较，这个const访问方法才有效(这是因为只有该索引中全部列都采用等值比较才可以定位唯一的一条记录)。</p><p>对于<code>唯一二级索引</code>来说，查询该列为<code>NULL值</code>的情况比较特殊，比如 这样:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM single_table WHERE key2 IS NULL;</span><br></pre></td></tr></table></figure><p>因为 <strong>唯一二级索引列并不限制NULL值的数量 ，所以上述语句可能访问到多条记录</strong>，也就是说上边这个语句不可以使用const访问方法来执行。</p><h2 id="ref"><a href="#ref" class="headerlink" title="ref"></a>ref</h2><p>有时候我们对某个<code>普通的二级索引列</code>与<code>常数</code>进行<code>等值比较</code>，比如:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM single_table WHERE key1 = &#x27;abc&#x27;;</span><br></pre></td></tr></table></figure><p>对于这个查询，我们当然可以选择全表扫描来逐一对比搜索条件是否满足要求，我们也可以先使用二级索引找到对应记录的id值，然后再回表到聚簇索引中查找完整的用户记录。<br>由于普通二级索引并不限制索引列值的唯一性，所以可能找到多条对应的记录，也就是说 <strong>使用二级索引来执行查询的代价取决于等值匹配到的二级索引记录条数</strong>。<br><strong>如果匹配的记录较少，则回表的代价还是比较低的</strong> (如果匹配到的记录太多…啧啧… MySQL可能会走全表扫描) ，所以MySQL可能选择使用索引而不是全表扫描的方式来执行查询。<br>设计MySQL的大叔就把这种搜索条件为二级索引列与常数等值比较，采用二级索引来执行查询的访问方法称为:<code>ref</code>。</p><p>采用ref访问方法执行查询的图示:<br><img src="/images/MySQL/10.0/5.png"></p><blockquote><p>从图示中可以看出，对于普通的二级索引来说，通过索引列进行等值比较后可能匹配到多条连续的记录，而不是像主键或者唯一二级索引那样最多只能匹配1条记录，所以这种ref访问方法比const差了那么一丢丢，但是在二级索引等值比较时匹配的记录数较少时的效率还是很高的(如果匹配的二级索引记录太多那么回表的成本就太大了)，跟坐高铁差不多。<br>不过需要注意下边两种情况:</p><ul><li>二级索引列值为NULL的情况<blockquote><p>不论是普通的二级索引，还是唯一二级索引，<strong>它们的索引列对包含NULL值的数量并不限制</strong> ， <strong>所以我们采用key IS NULL这种形式的搜索条件最多只能使用ref的访问方法，而不是const的访问方法</strong> 。</p></blockquote></li><li>对于某个包含多个索引列的二级索引来说，只要是最左边的连续索引列是与常数的等值比较就可能采用ref的访问方法;<blockquote><p>但是如果最左边的连续索引列并不全部是等值比较的话，它的访问方法就不能称为ref了;比如：<br><code>SELECT * FROM single_table WHERE key_part1 = &#39;god like&#39; AND key_part2 &gt; &#39;legendary&#39;;</code></p></blockquote></li></ul></blockquote><h2 id="ref-or-null"><a href="#ref-or-null" class="headerlink" title="ref_or_null"></a>ref_or_null</h2><p>有时候我们不仅想找出某个二级索引列的值等于某个常数的记录，还想把该列的值为NULL的记录也找出来，就像下边这个查询:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM single_demo WHERE key1 = &#x27;abc&#x27; OR key1 IS NULL;</span><br></pre></td></tr></table></figure><p>当使用二级索引而不是全表扫描的方式执行该查询时，这种类型的查询使用的访问方法就称为 <code>ref_or_null</code>，这个ref_or_null访问方法的执行过程如下:<br><img src="/images/MySQL/10.0/6.png"><br>可以看到，上边的查询相当于先分别从idx_key1索引对应的B+树中找出 <code>key1 IS NULL</code>和<code>key1 = &#39;abc&#39;</code>的两个连续的记录范围，然后根据这些二级索引记录中的id值再回表查找完整的用户记录。</p><h2 id="range"><a href="#range" class="headerlink" title="range"></a>range</h2><p>我们之前介绍的几种访问方法都是在对索引列与某一个常数进行等值比较的时候才可能使用到(ref_or_null比较奇特，还计算了值为NULL的情况)，但是有时候我们面对的搜索条件更复杂，比如下边这个查询:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM single_table WHERE key2 IN (1438, 6328) OR (key2 &gt;= 38 AND key2 &lt;= 79);</span><br></pre></td></tr></table></figure><p>我们当然还可以使用<code>全表扫描</code>的方式来执行这个查询，不过也可以使用 <code>二级索引 + 回表</code> 的方式执行。<br>如果采用 <code>二级索引 + 回表</code> 的方式来执行的话，那么此时的搜索条件就不只是要求索引列与常数的等值匹配了，而是索引列需要匹配某个或某些范围的值，在本查询中 key2列的值只要匹配下列3个范围中的任何一个就算是匹配成功了:</p><ul><li>key2的值是1438；</li><li>key2的值是6328 ；</li><li>key2的值在38和79之间；<br>设计MySQL的大叔把这种利用索引进行范围匹配的访问方法称之为: <code>range</code>。</li></ul><p>小贴士:<br>此处所说的使用索引进行范围匹配中的 <code>索引</code> 可以是聚簇索引， 也可以是二级索引。</p><p>如果把这几个所谓的key2列的值需要满足的范围在数轴上体现出来 的话，那应该是这个样子:<br><img src="/images/MySQL/10.0/7.png"><br>也就是从数学的⻆度看，每一个所谓的范围都是数轴上的一个区间， 3个范围也就对应着3个区间:<br>范围1:key2 &#x3D; 1438<br>范围2:key2 &#x3D; 6328<br>范围3:key2 ∈ [38, 79]，注意这里是闭区间。</p><p>我们可以把那种索引列等值匹配的情况称之为<code>单点区间</code>，上边所说的范围1和范围2都可以被称为单点区间；而像范围3这种的我们可以称为<code>连续范围区间</code>。</p><h2 id="index-能直接遍历二级索引获取结果集"><a href="#index-能直接遍历二级索引获取结果集" class="headerlink" title="index (能直接遍历二级索引获取结果集)"></a>index (能直接遍历二级索引获取结果集)</h2><p>看下边这个查询:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT key_part1, key_part2, key_part3 FROM single_table WHERE key_part2 = &#x27;abc&#x27;;</span><br></pre></td></tr></table></figure><p>由于key_part2并不是联合索引idx_key_part最左索引列，所以我们无法使用ref或者range访问方法来执行这个语句。</p><p>但是这个查询符合下边这两个条件:</p><ul><li>它的查询列表只有3个列:key_part1, key_part2, key_part3，而索引idx_key_part又包含这三个列；</li><li>搜索条件中只有key_part2列。这个列也包含在索引idx_key_part中；</li></ul><p>也就是说我们可以直接通过遍历idx_key_part索引的叶子节点的记录来比较key_part2 &#x3D; ‘abc’这个条件是否成立，把匹配成功的二级索引记录的key_part1, key_part2, key_part3列的值直接加到结果集中就行了。<br>由于二级索引记录比聚簇索记录小的多(聚簇索引记录要存储所有用户定义的列以及所谓的隐藏列，而二级索引记录只需要存放索引列和主键)，而且这个过程也<strong>不用进行回表操作</strong> ，所以<strong>直接遍历二级索引比直接遍历聚簇索引的成本要小很多</strong> 。<br>设计MySQL的大叔就把这种采用 <strong>遍历二级索引记录</strong> 的执行方式称之为: <code>index</code>。</p><h2 id="all-全表扫描-InnoDB为直接扫描聚簇索引"><a href="#all-全表扫描-InnoDB为直接扫描聚簇索引" class="headerlink" title="all (全表扫描, InnoDB为直接扫描聚簇索引)"></a>all (全表扫描, InnoDB为直接扫描聚簇索引)</h2><p>最直接的查询执行方式就是我们已经提了无数遍的<code>全表扫描</code>，对于 InnoDB表来说也就是<code>直接扫描聚簇索引</code>(lant:的叶子节点)，设计MySQL的大叔把这种使用全表扫描执行查询的方式称之为: <code>all</code>。</p><h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h1><h2 id="重温-二级索引-回表"><a href="#重温-二级索引-回表" class="headerlink" title="重温 二级索引 + 回表"></a>重温 <code>二级索引 + 回表</code></h2><p>一般情况下只能利用单个二级索引执行查询，比方说下边的这个查询:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM single_table WHERE key1 = &#x27;abc&#x27; AND key2 &gt; 1000;</span><br></pre></td></tr></table></figure><p>查询优化器会识别到这个查询中的两个搜索条件:<code>key1 = &#39;abc&#39;</code>、<code>key2 &gt; 1000</code><br>优化器一般会根据single_table表的<code>统计数据</code>来判断到底使用哪个条件到对应的二级索引中查询扫描的行数会更少，然后选择那个扫描行数较少的条件到对应的二级索引中查询(关于如何比较的细节我们后边的章节中会唠叨)。<br>然后将从该二级索引中查询到的结果经过回表得到完整的用户记录后 <strong>再根据其余的WHERE条件过滤记录</strong> 。<br>一般来说，等值查找比范围查找需要扫描的行数更少(也就是ref的访问方法一般比range好，但这也不总是一定的，也可能采用ref访问方法的那个索引列的值为特定值的行数特别多)<br>所以这里假设优化器决定使用idx_key1索引进行查询，那么整个查询过程可以分为两个步骤:</p><ul><li>步骤1:使用二级索引定位记录的阶段，也就是根据条件key1 &#x3D; ‘abc’从idx_key1索引代表的B+树中找到对应的二级索引记录。</li><li>步骤2:回表阶段，也就是根据上一步骤中找到的记录的主键值进行回表操作，也就是到聚簇索引中找到对应的完整的用户记录，再根据条件key2 &gt; 1000到完整的用户记录继续过滤。将最终符合过滤条件的记录返回给用户。</li></ul><p>这里需要特别提醒大家的一点是，因为二级索引的节点中的记录只包含索引列和主键，所以在步骤1中使用idx_key1索引进行查询时只会用到与key1列有关的搜索条件，其余条件，比如key2 &gt; 1000这个条件在步骤1中是用不到的，只有在步骤2完成回表操作后才能继续针对完整的用户记录中继续过滤。</p><h2 id="明确range访问方法使用的范围区间"><a href="#明确range访问方法使用的范围区间" class="headerlink" title="明确range访问方法使用的范围区间"></a>明确range访问方法使用的范围区间</h2><p>其实对于B+树索引来说，只要索引列和常数使用&#x3D;、&lt;&#x3D;&gt;、IN、NOT IN、IS NULL、IS NOT NULL、&gt;、&lt;、&gt;&#x3D;、&lt;&#x3D;、BETWEEN、!&#x3D;(不等于也可以写成&lt;&gt;)或 者LIKE操作符连接起来，就可以产生一个所谓的区间。</p><p>小贴士:<br>LIKE操作符比较特殊，只有在匹配完整字符串或者匹配字符串前缀时才可以利用索引，这里就不赘述了。<br>IN操作符的效果和若干个等值匹配操作符<code>=</code>之间用<code>OR</code>连接起来是一样的，也就是说会产生多个单点区间，比如下边这两个语句的效果是一样的:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM single_table WHERE key2 IN (1438, 6328);</span><br><span class="line">SELECT * FROM single_table WHERE key2 = 1438 OR key2 = 6328;</span><br></pre></td></tr></table></figure><p>不过在日常的工作中，一个查询的WHERE子句可能有很多个小的搜索条件，这些搜索条件需要使用AND或者OR操作符连接起来。<br>当我们想使用<code>range访问方法</code>来执行一个查询语句时，重点就是找出该查询可用的索引以及这些索引对应的范围区间。<br>下边分两种情况看一下怎么从由AND或OR组成的复杂搜索条件中提取出正确的范围区间。</p><h3 id="所有搜索条件都可以使用某个索引的情况"><a href="#所有搜索条件都可以使用某个索引的情况" class="headerlink" title="所有搜索条件都可以使用某个索引的情况"></a>所有搜索条件都可以使用某个索引的情况</h3><p>有时候每个搜索条件都可以使用到某个索引，比如下边这个查询语句:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM single_table WHERE key2 &gt; 100 AND key2 &gt; 200;</span><br></pre></td></tr></table></figure><p>这个查询中的搜索条件都可以使用到key2，也就是说每个搜索条件都对应着一个idx_key2的范围区间。这两个小的搜索条件使用AND 连接起来，也就是要取两个范围区间的交集。<br>在我们使用range访问方法执行查询时，key2 &gt; 100和key2 &gt; 200交集当然就是key2 &gt; 200了，也就是说上边这个查询使用idx_key2的范围区间就是(200, +∞)。</p><p>我们再看一下使用OR将 多个搜索条件连接在一起的情况:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM single_table WHERE key2 &gt; 100 OR key2 &gt; 200;</span><br></pre></td></tr></table></figure><p>OR意味着需要取各个范围区间的并集，所以上边这个查询在我们使用range访问方法执行查询时，使用的idx_key2索引的范围区间就是(100， +∞)。</p><h3 id="有的搜索条件无法使用索引的情况"><a href="#有的搜索条件无法使用索引的情况" class="headerlink" title="有的搜索条件无法使用索引的情况"></a>有的搜索条件无法使用索引的情况</h3><p>比如下边这个查询:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM single_table WHERE key2 &gt; 100 AND common_field = &#x27;abc&#x27;;</span><br></pre></td></tr></table></figure><p>请注意，这个查询语句中能利用的索引只有idx_key2一个， 而idx_key2这个二级索引的记录中又不包含common_field这个字段，所以在使用二级索引idx_key2定位定位记录的阶段用不到common_field &#x3D; ‘abc’这个条件，这个条件是在<code>回表</code>获取了完整的用户记录后才使用的。<br>而 <strong>范围区间是为了 <code>到索引中取记录</code> 中提出的概念</strong> ，所以在确定范围区间的时候不需要考虑common_field &#x3D; ‘abc’这个条件，我们在为某个索引确定范围区间的时候只需要把用 不到相关索引的搜索条件替换为TRUE就好了。</p><p>也就是说最上边那个查询使用idx_key2的范围区间就是:(100, +∞)。</p><p>再来看一下使用OR的情况:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM single_table WHERE key2 &gt; 100 OR common_field = &#x27;abc&#x27;;</span><br></pre></td></tr></table></figure><p>同理，我们把使用不到idx_key2索引的搜索条件替换为TRUE:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM single_table WHERE key2 &gt; 100 OR TRUE;</span><br></pre></td></tr></table></figure><p>接着化简:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM single_table WHERE TRUE;</span><br></pre></td></tr></table></figure><p>额，这也就说说明如果我们强制使用idx_key2执行查询的话，对应的范围区间就是(-∞, +∞)，也就是 <strong>需要将全部二级索引的记录进行回表</strong> ，<strong>这个代价肯定比直接全表扫描都大了</strong> 。<br>也就是说 <strong>一个使用到索引的搜索条件和没有使用该索引的搜索条件使用<code>OR</code>连接起来后是无法使用该索引的</strong> 。</p><h3 id="复杂搜索条件下找出范围匹配的区间"><a href="#复杂搜索条件下找出范围匹配的区间" class="headerlink" title="复杂搜索条件下找出范围匹配的区间"></a>复杂搜索条件下找出范围匹配的区间</h3><p>有的查询的搜索条件可能特别复杂，光是找出范围匹配的各个区间就挺烦的，比方说下边这个:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM single_table WHERE</span><br><span class="line">(key1 &gt; &#x27;xyz&#x27; AND key2 = 748 ) OR (key1 &lt; &#x27;abc&#x27; AND key1 &gt; &#x27;lmn&#x27;) OR (key1 LIKE &#x27;%suf&#x27; AND key1 &gt; &#x27;zzz&#x27; AND</span><br><span class="line">(key2 &lt; 8000 OR common_field = &#x27;abc&#x27;)) ;</span><br></pre></td></tr></table></figure><p>我滴个神，这个搜索条件真是绝了，不过大家不要被复杂的表象迷住了双眼，按着下边这个套路分析一下:</p><ul><li><p>首先查看WHERE子句中的搜索条件都涉及到了哪些列，哪些列可能使用到索引。</p><blockquote><p>这个查询的搜索条件涉及到了key1、key2、common_field 这3个列，然后key1列有普通的二级索引idx_key1，key2列有唯一二级索引idx_key2。</p></blockquote></li><li><p>对于那些可能用到的索引，分析它们的范围区间。 </p></li><li><ul><li>假设我们使用idx_key1执行查询 <blockquote><blockquote><p>我们需要把那些用不到该索引的搜索条件暂时移除掉，移除方法也简单，直接把它们替换为TRUE就好了。<br>上边的查询中除了有关key2和 common_field列不能使用到idx_key1索引外，key1 LIKE ‘%suf’也使用不到索引，所以把这些搜索条件替换为TRUE之后的样子就是这样:<br><code>(key1 &gt; &#39;xyz&#39; AND TRUE ) OR (key1 &lt; &#39;abc&#39; AND key1 &gt; &#39;lmn&#39;) OR (TRUE AND key1 &gt; &#39;zzz&#39; AND (TRUE OR TRUE))</code><br>化简一下上边的搜索条件就是:<code>(key1 &gt; &#39;xyz&#39;) OR (key1 &lt; &#39;abc&#39; AND key1 &gt; &#39;lmn&#39;) OR (key1 &gt; &#39;zzz&#39;)</code></p></blockquote></blockquote></li></ul></li><li><ul><li>替换掉永远为TRUE或FALSE的条件<blockquote><blockquote><p>因为符合key1 &lt; ‘abc’ AND key1 &gt; ‘lmn’永远为FALSE，所以上边的搜索条件可以被写成: <code>(key1 &gt; &#39;xyz&#39;) OR (key1 &gt; &#39;zzz&#39;)</code></p></blockquote></blockquote></li></ul></li><li><ul><li>继续化简区间<blockquote><blockquote><p>key1 &gt; ‘xyz’和key1 &gt; ‘zzz’之间使用OR操作符连接起来的，意味着要取并集，所以最终的结果化简的到的区间就是:key1 &gt; xyz。<br>也就是说:上边那个有一坨搜索条件的查询语句如果使用 idx_key1 索引执行查询的话，需要把满足key1 &gt; xyz的二级索引记录都取出来，然后拿着这些记录的id再进行回表，得到完整的用户记录之后再使用其他的搜索条件进行过滤。</p></blockquote></blockquote></li></ul></li><li><p>假设我们使用idx_key2执行查询</p><blockquote><p>我们需要把那些用不到该索引的搜索条件暂时使用TRUE条件替换掉，其中有关key1和 common_field的搜索条件都需要被替换掉，替换 结果就是:<br><code>(TRUE AND key2 = 748 ) OR (TRUE AND TRUE) OR (TRUE AND TRUE AND (key2 &lt; 8000 OR TRUE))</code><br>key2 &lt; 8000 OR TRUE的结果肯定是TRUE呀，也就是说化简之后的搜索条件成了:<code>key2 = 748 OR TRUE</code><br>这个化简之后的结果就更简单了: TRUE</p></blockquote></li></ul><p>这个结果也就意味着如果我们要使用idx_key2索引执行查询语句的话，需要扫描idx_key2二级索引的所有记录，然后再回表，这不是得不偿失么，所以这种情况下不会使用idx_key2索引的。</p><h1 id="索引合并-index-merge"><a href="#索引合并-index-merge" class="headerlink" title="索引合并 index merge"></a>索引合并 <code>index merge</code></h1><p>我们前边说过MySQL在一般情况下执行一个查询时最多只会用到单个二级索引，但不是还有特殊情况么，在这些特殊情况下也可能在一个查询中使用到多个二级索引，设计MySQL的大叔把这种使用到多个索引来完成一次查询的执行方法称之为:<code>index merge</code>，具体的索引合并算法有下边三种。</p><h2 id="Intersection合并"><a href="#Intersection合并" class="headerlink" title="Intersection合并"></a>Intersection合并</h2><p>Intersection翻译过来的意思是交集。这里是说某个查询可以使用多个二级索引，将从多个二级索引中查询到的结果取交集，比方说下边这个查询:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM single_table WHERE key1 = &#x27;a&#x27; AND key3 = &#x27;b&#x27;;</span><br></pre></td></tr></table></figure><p>假设这个查询使用Intersection合并的方式执行的话，那这个过 程就是这样的:</p><ul><li>从idx_key1二级索引对应的B+树中取出key1 &#x3D; ‘a’的相关 记录。</li><li>从idx_key3二级索引对应的B+树中取出key3 &#x3D; ‘b’的相关 记录。<br>二级索引的记录都是由 <code>索引列 + 主键</code> 构成的，所以我们可以计算出这两个结果集中id值的交集。<br>按照上一步生成的id值列表进行<code>回表</code>操作，也就是从聚簇索引中把指定id值的完整用户记录取出来，返回给用户。</li></ul><p>MySQL在某些特定的情况下才可能会使用到 <code>Intersection索引合并</code>:</p><ul><li>情况一: 二级索引列是等值匹配的情况，对于联合索引来说，在<code>联合索引</code>中的<code>每个列都必须等值匹配</code> 且 <code>不能出现只出现匹配部分列</code>的情况。</li><li>情况二:主键列可以是范围匹配<blockquote><p>比方说下边这个查询可能用到主键和idx_key_part进行Intersection索引合并的操作:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM single_table WHERE id &gt; 100 AND key1 = &#x27;a&#x27;;</span><br></pre></td></tr></table></figure></blockquote></li></ul><p>为啥呢?凭啥呀?突然冒出这么两个规定让大家一脸懵逼，下边我们 慢慢品一品这里头的玄机。这话还得从InnoDB的索引结构说起，你 要是记不清麻烦再回头看看。对于InnoDB的二级索引来说，记录先 是按照索引列进行排序，如果该二级索引是一个联合索引，那么会按 照联合索引中的各个列依次排序。而二级索引的用户记录是由索引列 + 主键构成的，二级索引列的值相同的记录可能会有好多条，这些 索引列的值相同的记录又是按照主键的值进行排序的。所以重点来 了，之所以在二级索引列都是等值匹配的情况下才可能使 用Intersection索引合并，是因为只有在这种情况下根据二级索 引查询出的结果集是按照主键值排序的。<br>so?还是没看懂根据二级索引查询出的结果集是按照主键值排序的 对使用Intersection索引合并有啥好处?小伙子，别忘了 Intersection索引合并会把从多个二级索引中查询出的主键值求 交集，如果从各个二级索引中查询的到的结果集本身就是已经按照主 键排好序的，那么求交集的过程就很easy啦。假设某个查询使 用Intersection索引合并的方式从idx_key1和idx_key2这两个 二级索引中获取到的主键值分别是:<br>从idx_key1中获取到已经排好序的主键值:1、3、5<br>从idx_key2中获取到已经排好序的主键值:2、3、4<br>那么求交集的过程就是这样:逐个取出这两个结果集中最小的主键 值，如果两个值相等，则加入最后的交集结果中，否则丢弃当前较小 的主键值，再取该丢弃的主键值所在结果集的后一个主键值来比较，直到某个结果集中的主键值用完了，如果还是觉得不太明白那继续往 下看:<br>先取出这两个结果集中较小的主键值做比较，因为1 &lt; 2，所 以把idx_key1的结果集的主键值1丢弃，取出后边的3来比 较。<br>因为3 &gt; 2，所以把idx_key2的结果集的主键值2丢弃，取出 后边的3来比较。<br>因为3 &#x3D; 3，所以把3加入到最后的交集结果中，继续两个结 果集后边的主键值来比较。<br>后边的主键值也不相等，所以最后的交集结果中只包含主键 值3。</p><p>别看我们写的啰嗦，这个过程其实可快了，时间复杂度是O(n)，但 是如果从各个二级索引中查询出的结果集并不是按照主键排序的话， 那就要先把结果集中的主键值排序完再来做上边的那个过程，就比较 耗时了。</p><p>小贴士:<br>按照有序的主键值去回表取记录有个专有名词儿，叫:Rowid Ordered Retrieval，简称ROR，以后大家在某些地方⻅到这个 名词儿就眼熟了。</p><p>另外，不仅是多个二级索引之间可以采用Intersection索引合 并，索引合并也可以有聚簇索引参加，也就是我们上边写的情况二: 在搜索条件中有主键的范围匹配的情况下也可以使 用Intersection索引合并索引合并。为啥主键这就可以范围匹配 了?还是得回到应用场景里，比如看下边这个查询:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM single_table WHERE key1 = &#x27;a&#x27; AND id &gt; 100;</span><br></pre></td></tr></table></figure><p>假设这个查询可以采用Intersection索引合并，我们理所当然的 以为这个查询会分别按照id &gt; 100这个条件从聚簇索引中获取一些 记录，在通过key1 &#x3D; ‘a’这个条件从idx_key1二级索引中获取一 些记录，然后再求交集，其实这样就把问题复杂化了，没必要从聚簇 索引中获取一次记录。别忘了二级索引的记录中都带有主键值的，所 以可以在从idx_key1中获取到的主键值上直接运用条件id &gt; 100 过滤就行了，这样多简单。所以涉及主键的搜索条件只不过是为了从 别的二级索引得到的结果集中过滤记录罢了，是不是等值匹配不重 要。<br>当然，上边说的情况一和情况二只是发生Intersection索引合并 的必要条件，不是充分条件。也就是说即使情况一、情况二成立，也 不一定发生Intersection索引合并，这得看优化器的心情。优化 器在下边两个条件满足的情况下才趋向于使用Intersection索引 合并:</p><ul><li>单独根据搜索条件从某个二级索引中获取的记录数太多，导致 回表开销太大</li><li>通过Intersection索引合并后需要回表的记录数大大减少</li></ul><h1 id="Union合并"><a href="#Union合并" class="headerlink" title="Union合并"></a>Union合并</h1><p>我们在写查询语句时经常想把既符合某个搜索条件的记录取出来，也把符合另外的某个搜索条件的记录取出来，我们说这些不同的搜索条 件之间是OR关系。有时候OR关系的不同搜索条件会使用到同一个索引，比方说这样:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM single_table WHERE key1 = &#x27;a&#x27; OR key3 = &#x27;b&#x27;</span><br></pre></td></tr></table></figure><p>Intersection是交集的意思，这适用于使用不同索引的搜索条件 之间使用AND连接起来的情况;Union是并集的意思，适用于使用不 同索引的搜索条件之间使用OR连接起来的情况。与Intersection<br>索引合并类似，MySQL在某些特定的情况下才可能会使用到Union索 引合并:</p><ul><li>情况一:二级索引列是等值匹配的情况，对于联合索引来说， 在联合索引中的每个列都必须等值匹配，不能出现只出现匹配 部分列的情况。<br>比方说下边这个查询可能用到idx_key1和idx_key_part这 两个二级索引进行Union索引合并的操作:<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM single_table WHERE key1 = &#x27;a&#x27; OR ( key_part1 = &#x27;a&#x27; AND key_part2 = &#x27;b&#x27; AND key_part3 = &#x27;c&#x27;);</span><br></pre></td></tr></table></figure>而下边这两个查询就不能进行Union索引合并:<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM single_table WHERE key1 &gt; &#x27;a&#x27; OR (key_part1 = &#x27;a&#x27; AND key_part2 = &#x27;b&#x27; AND key_part3 = &#x27;c&#x27;);</span><br><span class="line">SELECT * FROM single_table WHERE key1 = &#x27;a&#x27; OR key_part1 = &#x27;a&#x27;;</span><br></pre></td></tr></table></figure>第一个查询是因为对key1进行了范围匹配，第二个查询是因为 联合索引idx_key_part中的key_part2列并没有出现在搜 索条件中，所以这两个查询不能进行Union索引合并。</li><li>情况二:主键列可以是范围匹配 </li><li>情况三:使用Intersection索引合并的搜索条件<br>这种情况其实也挺好理解，就是搜索条件的某些部分使 用Intersection索引合并的方式得到的主键集合和其他方式 得到的主键集合取交集，比方说这个查询:<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM single_table WHERE key_part1 = &#x27;a&#x27; AND key_part2 = &#x27;b&#x27; AND key_part3 = &#x27;c&#x27; OR (key1 = &#x27;a&#x27; AND key3 = &#x27;b&#x27;);</span><br></pre></td></tr></table></figure>优化器可能采用这样的方式来执行这个查询:</li><li>先按照搜索条件key1 &#x3D; ‘a’ AND key3 &#x3D; ‘b’从索 引idx_key1和idx_key3中使用Intersection索引合 并的方式得到一个主键集合。</li><li>再按照搜索条件key_part1 &#x3D; ‘a’ AND key_part2 &#x3D; ‘b’ AND key_part3 &#x3D; ‘c’从联合索 引idx_key_part中得到另一个主键集合。</li><li>采用Union索引合并的方式把上述两个主键集合取并集， 然后进行回表操作，将结果返回给用户。</li></ul><p>当然，查询条件符合了这些情况也不一定就会采用Union索引合并， 也得看优化器的心情。优化器在下边两个条件满足的情况下才趋向于 使用Union索引合并:</p><ul><li>单独根据搜索条件从某个二级索引中获取的记录数比较少 </li><li>通过Intersection索引合并后需要回表的记录数大大减少</li></ul><h1 id="Sort-Union合并"><a href="#Sort-Union合并" class="headerlink" title="Sort-Union合并"></a>Sort-Union合并</h1><p>Union索引合并的使用条件太苛刻，必须保证各个二级索引列在进行 等值匹配的条件下才可能被用到，比方说下边这个查询就无法使用 到Union索引合并:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM single_table WHERE key1 &lt; &#x27;a&#x27; OR key3 &gt; &#x27;z&#x27;</span><br></pre></td></tr></table></figure><p>这是因为根据key1 &lt; ‘a’从idx_key1索引中获取的二级索引记录 的主键值不是排好序的，根据key3 &gt; ‘z’从idx_key3索引中获取 的二级索引记录的主键值也不是排好序的，但是key1 &lt; ‘a’和 key3 &gt; ‘z’这两个条件又特别让我们动心，所以我们可以这样:</p><ul><li>先根据key1 &lt; ‘a’条件从idx_key1二级索引总获取记录， 并按照记录的主键值进行排序</li><li>再根据key3 &gt; ‘z’条件从idx_key3二级索引总获取记录， 并按照记录的主键值进行排序</li><li>因为上述的两个二级索引主键值都是排好序的，剩下的操作和 Union索引合并方式就一样了。</li></ul><p>我们把上述这种先按照二级索引记录的主键值进行排序，之后按 照Union索引合并方式执行的方式称之为Sort-Union索引合并，很 显然，这种Sort-Union索引合并比单纯的Union索引合并多了一步 对二级索引记录的主键值排序的过程。</p><p>小贴士:<br>为啥有Sort-Union索引合并，就没有Sort-Intersection索引 合并么?是的，的确没有Sort-Intersection索引合并这么一 说，<br>Sort-Union的适用场景是单独根据搜索条件从某个二级索引中获 取的记录数比较少，这样即使对这些二级索引记录按照主键值进行 排序的成本也不会太高<br>而Intersection索引合并的适用场景是单独根据搜索条件从某个 二级索引中获取的记录数太多，导致回表开销太大，合并后可以明 显降低回表开销，但是如果加入Sort-Intersection后，就需要 为大量的二级索引记录按照主键值进行排序，这个成本可能比回表 查询都高了，所以也就没有引入Sort-Intersection这个玩意 儿。</p><h1 id="索引合并注意事项"><a href="#索引合并注意事项" class="headerlink" title="索引合并注意事项"></a>索引合并注意事项</h1><h2 id="联合索引替代Intersection索引合并"><a href="#联合索引替代Intersection索引合并" class="headerlink" title="联合索引替代Intersection索引合并"></a>联合索引替代Intersection索引合并</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM single_table WHERE key1 = &#x27;a&#x27; AND key3 = &#x27;b&#x27;;</span><br></pre></td></tr></table></figure><p>这个查询之所以可能使用Intersection索引合并的方式执行，还 不是因为idx_key1和idx_key2是两个单独的B+树索引，你要是把 这两个列搞一个联合索引，那直接使用这个联合索引就把事情搞定 了，何必用啥索引合并呢，就像这样:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE single_table drop index idx_key1, idx_key3, add index idx_key1_key3(key1, key3);</span><br></pre></td></tr></table></figure><p>这样我们把没用的idx_key1、idx_key3都干掉，再添加一个联合 索引idx_key1_key3，使用这个联合索引进行查询简直是又快又 好，既不用多读一棵B+树，也不用合并结果，何乐而不为?</p><p>小贴士:<br>不过小心有单独对key3列进行查询的业务场景，这样子不得不再把 key3列的单独索引给加上。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;对于我们这些MySQL的使用者来说，MySQL其实就是一个软件，平时用的最多的就是查询功能。&lt;br&gt;DBA时不时丢</summary>
      
    
    
    
    <category term="MySQL 读书笔记" scheme="http://rymuscle.github.io/categories/MySQL-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="MySQL" scheme="http://rymuscle.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>9.6 InnoDB的表空间 之 系统表空间</title>
    <link href="http://rymuscle.github.io/2021/11/04/MySQL%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/9.6%20TODO%20%E5%AD%98%E6%94%BE%E9%A1%B5%E9%9D%A2%E7%9A%84%E5%A4%A7%E6%B1%A0%E5%AD%90--InnoDB%E7%9A%84%E8%A1%A8%E7%A9%BA%E9%97%B4/"/>
    <id>http://rymuscle.github.io/2021/11/04/MySQL%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/9.6%20TODO%20%E5%AD%98%E6%94%BE%E9%A1%B5%E9%9D%A2%E7%9A%84%E5%A4%A7%E6%B1%A0%E5%AD%90--InnoDB%E7%9A%84%E8%A1%A8%E7%A9%BA%E9%97%B4/</id>
    <published>2021-11-04T14:15:17.000Z</published>
    <updated>2024-04-21T06:35:21.066Z</updated>
    
    <content type="html"><![CDATA[<p>了解完了独立表空间的基本结构，系统表空间的结构也就好理解多 了，系统表空间的结构和独立表空间基本类似，只不过由于整个 MySQL进程只有一个系统表空间，在系统表空间中会额外记录一些 有关整个系统信息的⻚面，所以会比独立表空间多出一些记录这些信 息的⻚面。因为这个系统表空间最牛逼，相当于是表空间之首，所以 它的表空间 ID(Space ID)是0。</p><h1 id="系统表空间的整体结构"><a href="#系统表空间的整体结构" class="headerlink" title="系统表空间的整体结构"></a>系统表空间的整体结构</h1><p>系统表空间与独立表空间的一个非常明显的不同之处就是在表空间开头有许多记录整个系统属性的⻚面，如图:<br><img src="/images/MySQL/9.2/1.png" width="550px" style="border: 1px solid #ccc;border-radius: 5px;"/><br>可以看到，系统表空间和独立表空间的前三个⻚面(⻚号分别 为0、1、2，类型分别是FSP_HDR、IBUF_BITMAP、INODE)的类 型是一致的，只是⻚号为3<del>7的⻚面是系统表空间特有的，我们来 看一下这些多出来的⻚面都是干啥使的:<br><img src="/images/MySQL/9.2/2.png" width="550px" style="border: 1px solid #ccc;border-radius: 5px;"/><br>除了这几个记录系统属性的⻚面之外，系统表空间的extent 1和 extent 2这两个区，也就是⻚号从64</del>127这128个⻚面被称 为Doublewrite buffer，也就是双写缓冲区。不过上述的大部分 知识都涉及到了事务和多版本控制的问题，这些问题我们会放在后边 的章节集中唠叨，现在讲述太影响用户体验，所以现在我们只唠叨一 下有关InnoDB数据字典的知识，其余的概念在后边再看。</p><h1 id="InnoDB数据字典"><a href="#InnoDB数据字典" class="headerlink" title="InnoDB数据字典"></a>InnoDB数据字典</h1><p>我们平时使用INSERT语句向表中插入的那些记录称之为用户数据， MySQL只是作为一个软件来为我们来保管这些数据，提供方便的增 删改查接口而已。但是每当我们向一个表中插入一条记录的时候， MySQL先要校验一下插入语句对应的表存不存在，插入的列和表中 的列是否符合，如果语法没有问题的话，还需要知道该表的聚簇索引 和所有二级索引对应的根⻚面是哪个表空间的哪个⻚面，然后把记录 插入对应索引的B+树中。所以说，MySQL除了保存着我们插入的用 户数据之外，还需要保存许多额外的信息，比方说:</p><ul><li>某个表属于哪个表空间，表里边有多少列 </li><li>表对应的每一个列的类型是什么</li><li>该表有多少索引，每个索引对应哪几个字段，该索引对应的根 ⻚面在哪个表空间的哪个⻚面</li><li>该表有哪些外键，外键对应哪个表的哪些列 </li><li>某个表空间对应文件系统上文件路径是什么 </li><li>balabala … 还有好多，不一一列举了</li></ul><p>上述这些数据并不是我们使用INSERT语句插入的用户数据，实际上 是为了更好的管理我们这些用户数据而不得已引入的一些额外数据， 这些数据也称为元数据。InnoDB存储引擎特意定义了一些列的内部 系统表(internal system table)来记录这些这些元数据:<br><img src="/images/MySQL/9.2/3.png" width="550px" style="border: 1px solid #ccc;border-radius: 5px;"/><br>这些系统表也被称为数据字典，它们都是以B+树的形式保存在系统 表空间的某些⻚面中，其中 SYS_TABLES、SYS_COLUMNS、SYS_INDEXES、SYS_FIELDS这 四个表尤其重要，称之为基本系统表(basic system tables)，我 们先看看这4个表的结构:<br><img src="/images/MySQL/9.2/4.png" width="550px" style="border: 1px solid #ccc;border-radius: 5px;"/><br>这个SYS_TABLES表有两个索引: </p><ul><li>以NAME列为主键的聚簇索引 </li><li>以ID列建立的二级索引</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;了解完了独立表空间的基本结构，系统表空间的结构也就好理解多 了，系统表空间的结构和独立表空间基本类似，只不过由于整个 MySQL进程只有一个系统表空间，在系统表空间中会额外记录一些 有关整个系统信息的⻚面，所以会比独立表空间多出一些记录这些信 息的⻚面。因为这个系统表空间最</summary>
      
    
    
    
    <category term="MySQL 读书笔记" scheme="http://rymuscle.github.io/categories/MySQL-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="MySQL" scheme="http://rymuscle.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>9.5 InnoDB独立表空间结构 之 各类型⻚面详细情况</title>
    <link href="http://rymuscle.github.io/2021/10/29/MySQL%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/9.5%20InnoDB%E7%9A%84%E8%A1%A8%E7%A9%BA%E9%97%B4%20%E4%B9%8B%20%E7%8B%AC%E7%AB%8B%E8%A1%A8%E7%A9%BA%E9%97%B4%E7%BB%93%E6%9E%84(5)/"/>
    <id>http://rymuscle.github.io/2021/10/29/MySQL%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/9.5%20InnoDB%E7%9A%84%E8%A1%A8%E7%A9%BA%E9%97%B4%20%E4%B9%8B%20%E7%8B%AC%E7%AB%8B%E8%A1%A8%E7%A9%BA%E9%97%B4%E7%BB%93%E6%9E%84(5)/</id>
    <published>2021-10-29T14:11:32.000Z</published>
    <updated>2024-04-22T05:09:33.810Z</updated>
    
    <content type="html"><![CDATA[<p>到现在为止我们已经大概清楚了<code>表空间</code>、<code>段</code>、<code>区</code>、<code>XDES Entry</code>、 <code>各种以XDES Enty为节点的链表</code>、<code>List Base Node</code>、<code>INODE Entry</code> 等概念了。<br>可是总有一种不踏实的感觉：</p><ul><li>每个区对应的 <code>XDES Entry结构</code> 到底存储在<code>表空间</code>的什么地方? </li><li><strong>直属于</strong> <code>表空间</code>的 <code>FREE</code>、<code>FREE_FRAG</code>、<code>FULL_FRAG</code> 链表的<code>基节点</code>到底存储在<code>表空间</code>的什么地方? (其实上一篇我们已经知道 <code>段</code>的3种链表的基节点都在INODE Entry结构中，只不过不知道 INODE Entry到底在表空间哪个位置罢了)</li><li>每个段对应的<code>INODE Entry结构</code>到底存在表空间的什么地方?</li></ul><p>我们前边介绍了每256个连续的区算是一个组，想解决刚才提出来的这些个疑问还得从每个组开头的一些类型相同的⻚面说起，接下来我们一个⻚面一个⻚面的分析，真相⻢上就要浮出水面了。</p><h1 id="FSP-HDR类型的页"><a href="#FSP-HDR类型的页" class="headerlink" title="FSP_HDR类型的页"></a><code>FSP_HDR</code>类型的页</h1><p>首先看<code>表空间</code>-&gt;<code>第一个组</code>-&gt;<code>第一个区</code>-&gt;<code>第一个⻚面</code>(⻚号为0)，这个⻚面的类型是<code>FSP_HDR</code>，它存储了表空间的一些整体属性以及第一个组内256个区的对应的XDES Entry结构，直接看这个类型的⻚面的示意图:<br><img src="/images/MySQL/9.0/10.png" style="margin-left:0px;border: 1px solid #ccc;border-radius: 5px;"/><br>从图中可以看出，一个完整的FSP_HDR类型的⻚面大致由5个部分组成，各个部分的具体释义如下表:<br><code>File Header</code> ： 文件头部； 38字节； ⻚的一些通用信息；<br><code>File Space Header</code>： 表空间头部；112字节； 表空间的一些整体属性信息；<br><code>XDES Entry</code>：区描述信息；10240字节；存储本组256个区对应的属性信息；<br><code>Empty Space</code>：尚未使用空间；5986字节；用于⻚结构的填充，没啥实际意义；<br><code>File Trailer</code>：文件尾部；8字节； 校验⻚是否完整；</p><p>File Header和File Trailer就不再强调了，另外的几个部分中，Empty Space是尚未使用的空间，我们不用管它，重点来看看<code>File Space Header</code>和<code>XDES Entry</code>这两个部分。</p><h2 id="File-Space-Header部分"><a href="#File-Space-Header部分" class="headerlink" title="File Space Header部分"></a>File Space Header部分</h2><p>从名字就可以看出来，这个部分是用来存储表空间的一些整体属性的:<br><img src="/images/MySQL/9.0/11.png" width="550px" style="margin-left:0px;border: 1px solid #ccc;border-radius: 5px;"/></p><blockquote><p>Space ID : 4字节；表空间ID；<br><del>Not Used : 4字节；这四个字节未被使用，可以忽略；</del><br>Size : 4字节；当前表空间占有的页面数；<br>FREE Limit : 4字节；尚未被初始化的最小页号，大于或等于这个页号的区对应的XDES Entry结构都没有被加入FREE链表；<br>Space Flags : 4字节；表空间的一些占用存储空间比较小的属性；<br>FRAG_N_USED : 4字节；FREE_FRAG链表中已使用的⻚面数量；<br><strong>List Base Node for <code>Free</code> List: 16字节；FREE链表的基节点；</strong><br><strong>List Base Node for <code>FREE_FRAG</code> List : 16字节；FREE_FRAG链表的基节点；</strong><br><strong>List Base Node for <code>FULL_FRAG</code> List : 415字节；FULL_FRAG链表的基节点；</strong><br>Next Unused Segment ID: 8字节； 当前表空间中下一个未使用的 Segment ID;<br>List Base Node for SEG_INNODES_FULL List：16字节；SEG_INODES_FULL链表的基节点；<br>List Base Node for SEG_INNODES_FREE List：16字节；SEG_INODES_FREE链表的基节点；</p></blockquote><blockquote><p>这里头的<code>Space ID</code>、<code>Not Used</code>、<code>Size</code> 这三个字段大家肯定一看就懂，其他的字段我们再详细瞅瞅。</p></blockquote><blockquote><ul><li><p>📌 <code>List Base Node for FREE List</code>、<code>List Base Node for FREE_FRAG List</code>、<code>List Base Node for FULL_FRAG List</code><br>这三个大家看着太亲切了，分别是<strong>直属于</strong><code>表空间</code>的<code>FREE链表的基节点</code>、<code>FREE_FRAG链表的基节点</code>、<code>FULL_FRAG链表的基节点</code>， <strong>这三个链表的基节点在表空间的位置是固定的，就在表空间的第一个⻚面</strong> (也就是FSP_HDR类型的⻚面)的File Space Header部分。所以之后定位这几个链表就so easy 啦。</p></li><li><p>📌 <code>FRAG_N_USED</code><br>这个字段表明在 <code>FREE_FRAG链表</code> 中已经使用的⻚面数量，方便之后在链表中查找空闲的⻚面。</p></li><li><p><code>FREE Limit 我们知道表空间都对应着具体的磁盘文件，一开始我们创建表空间的时候对应的磁盘文件中都没有数据，所以我们需要对表空间完成一个初始化操作，包括为表空间中的区建立</code>XDES Entry结构<code>，为各个段建立</code>INODE Entry结构<code>，建立各种</code>链表&#96;吧啦吧啦的各种操作。<br>我们可以一开始就为表空间申请一个特别大的空间，但是实际上有绝大部分的区是空闲的，我们可以选择把所有的这些空闲区对应的XDES Entry结构加入FREE链表，也可以选择只把一部分的空闲区加入FREE链表，等啥时候空闲链表中的XDES Entry结构对应的区不够使了，再把之前没有加入FREE链表的空闲区对应的XDES Entry结构加入FREE链表，中心思想就是啥时候用到啥时候初始化，设计InnoDB的大叔采用的就是后者，他们为表空间定义了FREE Limit这个字段，在该字段表示的⻚号之前的区都被初始化了，之后的区尚未被初始化。</p></li><li><p><code>Next Unused Segment ID</code><br>表中每个索引都对应2个段，每个段都有一个唯一的ID，那当我们为某个表新创建一个索引的时候，就意味着要创建两个新的段。那怎么为这个新创建的段找一个唯一的ID呢?去遍历现在表空间中所有的段么?我们说过，遍历是不可能遍历的，这辈子都不可能遍历，所以设计InnoDB的大叔们提出了这个名叫Next Unused Segment ID的字段，该字段表明当前表空间中最大的段ID的下一个ID，这样在创建新段的时候赋予新段一个唯一的ID值就so easy啦，直接使用这个字段的值就好了。</p></li><li><p>Space Flags<br>表空间对于一些布尔类型的属性，或者只需要寥寥几个比特位搞定的属性都放在了这个Space Flags中存储，虽然它只有4个字节，32个比特位大小，却存储了好多表空间的属性，详细情况如下表:</p><img src="/images/MySQL/9.0/12.png" width="450px" style="margin-left:0px;border: 1px solid #ccc;border-radius: 5px;"/>Tips: 不同MySQL版本里 SPACE_FLAGS 代表的属性可能有些差异，这里列举的是5.7.21版本。不过大家现在不必深究它们的意思，因为我们一旦把这些概念展开，就需要非常大的篇幅，主要怕大家受不了。我们还是先挑重要的看，把主要的表空间结构了解完，这些 SPACE_FLAGS 里的属性的细节就暂时不深究了。</li><li><p><code>List Base Node for SEG_INODES_FULL List</code> 和 <code>List Base Node for SEG_INODES_FREE List</code><br>每个<code>段</code>对应的<code>INODE Entry结构</code>会集中存放到一个类型为<code>INODE的⻚</code>中，如果表空间中的段特别多，则会有多个INODE Entry结构，可能一个⻚放不下，这些INODE类型的⻚会组成两种列表:<br><code>SEG_INODES_FULL链表</code>，该链表中的INODE类型的⻚面都已经被INODE Entry结构填充满了，没空闲空间存放额外的INODE Entry了。<br><code>SEG_INODES_FREE链表</code>，该链表中的INODE类型的⻚面都已经仍有空闲空间来存放INODE Entry结构。<br>由于我们现在还没有详细唠叨INODE类型⻚，所以等会说过INODE类型的⻚之后再回过头来看这两个链表。</p></li></ul></blockquote><h2 id="XDES-Entry部分"><a href="#XDES-Entry部分" class="headerlink" title="XDES Entry部分"></a>XDES Entry部分</h2><p>紧接着 <code>File Space Header部分</code> 的就是 <code>XDES Entry部分</code>。我们唠叨过无数次但却一直未见真身的<code>XDES Entry</code>就存储在表空间的第一个页面中。<br>一个XDES Entry结构的大小是 40字节，<span style="color:#f8b500;font-weight:500;">由于一个⻚面的大小有限，只能存放有限个XDES Entry 结构，所以我们才把256个区划分成一组，在每组的第一个⻚面中存放256个XDES Entry结构</span>。<br>大家回看那个<code>FSP_HDR类型⻚面</code>的示意图，XDES Entry 0就对应着extent 0，XDES Entry 1就对 应着extent 1… 依此类推，XDES Entry255就对应着extent 255。</p><p>因为每个区对应的XDES Entry结构的地址是固定的，所以我们可以很轻松地访问它们。</p><h1 id="XDES类型的页面"><a href="#XDES类型的页面" class="headerlink" title="XDES类型的页面"></a><code>XDES类型</code>的页面</h1><p>我们说过，每一个<code>XDES Entry结构</code>对应<code>表空间</code>的一个<code>区</code>，虽然一个XDES Entry结构只占用40字节，但抵不住表空间<code>区</code>的数量也多啊。</p><p><strong>在区的数量非常多时，一个单独的⻚可能就不够存放足够多的XDES Entry结构，所以我们把表空间的区分为了若干个组，每组开头的一个⻚面记录着本组内所有的区对应的XDES Entry结构。</strong></p><p>由于第一个组的第一个⻚面有些特殊，因为它也是整个表空间的第一个⻚面，所以除了记录本组中的所有区对应的XDES Entry结构以外， 还记录着表空间的一些整体属性，这个⻚面的类型就是我们刚刚说完的FSP_HDR类型，整个表空间里只有一个这个类型的⻚面。</p><p>除去第一个分组以外，之后的每个分组的第一个⻚面只需要记录本组内所有的区对应的XDES Entry结构即可，不需要再记录表空间的属性了， 为了和FSP_HDR类型做区别，我们把之后每个分组的第一个⻚面的类型定义为XDES，它的结构和FSP_HDR类型是非常相似的:<br><img src="/images/MySQL/9.0/13.png" width="margin-left:0px;width:550px" style="border: 1px solid #ccc;border-radius: 5px;"/><br>与FSP_HDR类型的⻚面对比，除了少了File Space Header部分之外(少了记录表空间整体属性的部分)，其余的部分是一样一样的。由于上边唠叨FSP_HDR类型的页面时已经够仔细了，对于XDES类型的⻚面也就不重复唠叨了。</p><h1 id="IBUF-BITMAP类型的页面"><a href="#IBUF-BITMAP类型的页面" class="headerlink" title="IBUF_BITMAP类型的页面"></a>IBUF_BITMAP类型的页面</h1><p>对比前边介绍<code>表空间</code>的图，每个分组的第二个⻚面的类型都是<code>IBUF_BITMAP</code>，这种类型的⻚里边记录了一些有关Change Buffer的东东。<br><img src="/images/MySQL/9.1/n1.png" width="550px" style="margin-left:0px;border: 1px solid #ccc;border-radius: 5px;"/></p><h1 id="INODE类型的页面"><a href="#INODE类型的页面" class="headerlink" title="INODE类型的页面"></a>INODE类型的页面</h1><p>再次对比前边介绍<code>表空间</code>的图，第一个分组的第三个⻚面的类型是<code>INODE</code>。<br>我们前边说过设计InnoDB的大叔为每个索引定义了两个段，而且为某些特殊功能定义了些特殊的段。<br>为了方便管理，他们又为每个段设计了一个INODE Entry结构，这个结构中记录了关于这个段的相关属性。<br>我们将要介绍的这个<code>INODE类型的⻚</code>就是为了存储<code>INODE Entry结构</code>而存在的。 直接看图:<br><img src="/images/MySQL/9.0/14.png" style="margin-left:0px;border: 1px solid #ccc;border-radius: 5px;"/><br>从图中可以看出，一个INODE类型的⻚面是由这几部分构成的:<br><img src="/images/MySQL/9.0/15.png" width="550px" style="margin-left:0px;border: 1px solid #ccc;border-radius: 5px;"/></p><blockquote><p>除了File Header、Empty Space、File Trailer这几个老朋友外，我们重点关注 <code>List Node for INODE Page List</code> 和 <code>INODE Entry</code> 这两个部分。</p></blockquote><h2 id="INODE-Entry部分"><a href="#INODE-Entry部分" class="headerlink" title="INODE Entry部分"></a><code>INODE Entry部分</code></h2><p>我们前边已经详细介绍过这个结构的组成了，主要包括对应的段内零散⻚面的地址以及附属于该段的FREE、NOT_FULL和FULL链表的基节点。<br>每个INODE Entry结构占用192字节，一个⻚面里可以存储84个这样的结构。</p><h2 id="List-Node-for-INODE-Page-List结构"><a href="#List-Node-for-INODE-Page-List结构" class="headerlink" title="List Node for INODE Page List结构"></a><code>List Node for INODE Page List</code>结构</h2><p>重点看一下这个，因为一个表空间中可能存在超过84个段，所以可能一个INODE类型的⻚面不足以存储所有的段对应的INODE Entry结构，所以就需要额外的INODE类型的⻚面来存储这些结构。<br>还是为了方便管理这些INODE类型的⻚面，设计InnoDB的大叔们将这些INODE类型的⻚面串联成两个不同的链表:</p><ul><li><code>SEG_INODES_FULL链表</code>: 该链表中的INODE类型的⻚面中已经没有空闲空间来存储额外的INODE Entry结构了。</li><li><code>SEG_INODES_FREE链表</code>: 该链表中的INODE类型的⻚面中还有空闲空间来存储额外的INODE Entry结构了。</li></ul><p>想必大家已经认出这两个链表了，我们前边提到过这两个链表的基节点就存储在<code>File Space Header</code>里边，也就是说这两个链表的基节点的位置是固定的，所以我们可以很轻松的访问到这两个链表。</p><p>以后每当我们新创建一个段(创建索引时就会创建段)时，都会创建一个INODE Entry结构与之对应，存储INODE Entry的大致过程就是这样的:</p><ul><li>先看看<code>SEG_INODES_FREE链表</code>是否为空，如果不为空，直接从该链表中获取一个节点，也就相当于获取到一个仍有空闲空间的INODE类型的⻚面，然后把该INODE Entry结构放到该⻚面中。当该⻚面中无剩余空间时，就把该⻚放到SEG_INODES_FULL链表中。</li><li>如果<code>SEG_INODES_FREE链表</code>为空，则需要从表空间的FREE_FRAG链表中申请一个⻚面，修改该⻚面的类型为INODE，把该⻚面放到SEG_INODES_FREE链表中，与此同时把该INODE Entry结构放入该⻚面。</li></ul><h2 id="Segment-Header-结构"><a href="#Segment-Header-结构" class="headerlink" title="Segment Header 结构"></a>Segment Header 结构</h2><p>我们知道一个索引会产生两个段，分别是<code>叶子节点段</code>和<code>非叶子节点段</code>，而<code>每个段</code>都会对应一个<code>INODE Entry结构</code>，那我们怎么知道某个段对应哪个INODE Entry结构呢? 所以得找个地方记下来这个对应关系。<br>希望你还记得我们在唠叨<code>数据⻚</code>，也就是<code>INDEX类型的⻚</code>时有一个<code>Page Header</code>部分，当然我不能指望你记住，所以把Page Header部分再抄一遍给你看:<br><img src="/images/MySQL/9.0/16.png" width="550px" style="margin-left:0px;border: 1px solid #ccc;border-radius: 5px;"/><br>其中的PAGE_BTR_SEG_LEAF和PAGE_BTR_SEG_TOP都占用10个字 节，它们其实对应一个叫Segment Header的结构，该结构图示如 下:<br><img src="/images/MySQL/9.0/17.png" width="550px" style="margin-left:0px;border: 1px solid #ccc;border-radius: 5px;"/><br>各个部分的具体释义如下:<br><img src="/images/MySQL/9.0/18.png" width="550px" style="margin-left:0px;border: 1px solid #ccc;border-radius: 5px;"/><br>这样子就很清晰了，PAGE_BTR_SEG_LEAF记录着叶子节点段对应的INODE Entry结构的地址是哪个表空间的哪个⻚面的哪个偏移量；<br>PAGE_BTR_SEG_TOP记录着非叶子节点段对应的INODE Entry结构的地址是哪个表空间的哪个⻚面的哪个偏移量。<br>这样子索引和其对应的段的关系就建立起来了。<br>不过需要注意的一点是，<strong>因为一个索引只对应两个段，所以只需要在索引的根⻚面中记录这两个结构即可。</strong></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;到现在为止我们已经大概清楚了&lt;code&gt;表空间&lt;/code&gt;、&lt;code&gt;段&lt;/code&gt;、&lt;code&gt;区&lt;/code&gt;、&lt;code&gt;XDES Entry&lt;/code&gt;、 &lt;code&gt;各种以XDES Enty为节点的链表&lt;/code&gt;、&lt;code&gt;List Base Nod</summary>
      
    
    
    
    <category term="MySQL 读书笔记" scheme="http://rymuscle.github.io/categories/MySQL-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="MySQL" scheme="http://rymuscle.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>9.4 InnoDB的表空间 之 独立表空间结构(4)</title>
    <link href="http://rymuscle.github.io/2021/10/28/MySQL%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/9.4%20InnoDB%E7%9A%84%E8%A1%A8%E7%A9%BA%E9%97%B4%20%E4%B9%8B%20%E7%8B%AC%E7%AB%8B%E8%A1%A8%E7%A9%BA%E9%97%B4%E7%BB%93%E6%9E%84(4)/"/>
    <id>http://rymuscle.github.io/2021/10/28/MySQL%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/9.4%20InnoDB%E7%9A%84%E8%A1%A8%E7%A9%BA%E9%97%B4%20%E4%B9%8B%20%E7%8B%AC%E7%AB%8B%E8%A1%A8%E7%A9%BA%E9%97%B4%E7%BB%93%E6%9E%84(4)/</id>
    <published>2021-10-28T12:57:09.000Z</published>
    <updated>2024-04-21T06:36:04.374Z</updated>
    
    <content type="html"><![CDATA[<h1 id="段的结构-INODE-Entry结构"><a href="#段的结构-INODE-Entry结构" class="headerlink" title="段的结构(INODE Entry结构)"></a><code>段</code>的结构(<code>INODE Entry结构</code>)</h1><p>我们前边说过，<code>段</code>其实不对应<code>表空间</code>中某一个连续的物理区域，而是一个 <strong>逻辑上的概念</strong> ，由<code>若干个零散的⻚面</code>以及<code>一些完整的区</code>组成。 像每个区都有对应的 <code>XDES Entry</code>结构 来记录这个区中的属性一样，设计 InnoDB的大叔也为每个<code>段</code>都定义了一个<code>INODE Entry结构</code>来记录<code>段</code>中的属性。示意图如下:<br><img src="/images/MySQL/9.0/9.png" width="550px" style="margin-left:0px;border: 1px solid #ccc;border-radius: 5px;"/></p><ul><li><p>Segment ID : 就是指这个 <code>INODE Entry结构</code> 对应的段的编号(ID)。</p></li><li><p><code>NOT_FULL_N_USED</code><br>这个字段指在 <code>NOT_FULL链表</code>中已经使用了多少⻚面。有了这个字段之后就可以快速定位空闲⻚面。</p></li><li><p><span style="font-weight:600;color:#33b045;"> List Base Node </span> ：段的3个链表对应的基节点<br>分别为<code>段</code>的<code>FREE链表</code>、<code>NOT_FULL链表</code>、<code>FULL链表</code> 定义了 <code>List Base Node</code>。<br>这样我们想查找某个段的某个链表的头节点和尾节点的时候，就可以直接到这个部分找到对应链表的 List Base Node。so easy!</p></li><li><p>Magic Number<br>这个值是用来标记这个 <code>INODE Entry</code> 是否已经被初始化了(初始化的意思就是把各个字段的值都填进去了)。如果这个数字是值的97937874，表明该INODE Entry已经初始化，否则没有被初始化。(不用纠结这个值有啥特殊含义，人家规定的)。</p></li><li><p>Fragment Array Entry<br>我们前边强调过无数次<code>段</code>是<code>一些零散⻚面</code>和<code>一些完整的区</code>的集合，每个Fragment Array Entry结构都对应着一个零散的⻚面，这个结构一共4个字节，表示一个零散⻚面的⻚号。</p></li></ul><p>结合着这个<code>INODE Entry结构</code>，大家可能对段是一些零散⻚面和一些完整的区的集合的理解再次深刻一些。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;段的结构-INODE-Entry结构&quot;&gt;&lt;a href=&quot;#段的结构-INODE-Entry结构&quot; class=&quot;headerlink&quot; title=&quot;段的结构(INODE Entry结构)&quot;&gt;&lt;/a&gt;&lt;code&gt;段&lt;/code&gt;的结构(&lt;code&gt;INODE E</summary>
      
    
    
    
    <category term="MySQL 读书笔记" scheme="http://rymuscle.github.io/categories/MySQL-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="MySQL" scheme="http://rymuscle.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>📌 9.3 InnoDB的表空间 之 独立表空间结构(3)</title>
    <link href="http://rymuscle.github.io/2021/10/27/MySQL%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/9.3%20InnoDB%E7%9A%84%E8%A1%A8%E7%A9%BA%E9%97%B4%20%E4%B9%8B%20%E7%8B%AC%E7%AB%8B%E8%A1%A8%E7%A9%BA%E9%97%B4%E7%BB%93%E6%9E%84(3)/"/>
    <id>http://rymuscle.github.io/2021/10/27/MySQL%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/9.3%20InnoDB%E7%9A%84%E8%A1%A8%E7%A9%BA%E9%97%B4%20%E4%B9%8B%20%E7%8B%AC%E7%AB%8B%E8%A1%A8%E7%A9%BA%E9%97%B4%E7%BB%93%E6%9E%84(3)/</id>
    <published>2021-10-27T14:19:17.000Z</published>
    <updated>2024-04-21T06:19:47.087Z</updated>
    
    <content type="html"><![CDATA[<p>到现在为止，我们已经提出的概念五花八⻔(像 <code>区</code>、<code>碎片区</code>、<code>段</code>、<code>附属于段的区</code>、区对应的<code>XDES Entry结构</code>)。<br>我们把事情搞这么麻烦，初心仅仅是 <strong>想减少随机IO，而又不至于数据量少的表浪费空间</strong> 。</p><p>现在我们知道向表中插入数据本质上就是向表中各个索引的 <code>叶子节点段</code>、<code>非叶子节点段</code> 插入数据，也知道了不同的区有不同的状态。<br>再回到最初的起点，捋一捋向某个<code>段</code>中插入数据时，申请新页面的过程;</p><h1 id="先从直接隶属于表空间的碎片区中申请页"><a href="#先从直接隶属于表空间的碎片区中申请页" class="headerlink" title="先从直接隶属于表空间的碎片区中申请页"></a>先从<strong>直接隶属于</strong><code>表空间</code>的<code>碎片区</code>中申请<code>页</code></h1><p>一开始，当<code>段</code>中数据较少时，首先会查看<code>表空间</code>中是否有状态为<code>FREE_FRAG的区</code>，也就是找还空闲页的<code>碎片区</code></p><ul><li>如果找到了，则从该区中取一些零碎的⻚把数据插进去;</li><li>如果没找到，则到<code>表空间</code>下申请一个状态为<code>FREE的区</code>(也就是空闲的区)，把该区的状态变为<code>FREE_FRAG</code>，(lant:相当于从表空间中新拿了个<code>FREE空闲区</code>作为 新的<code>FREE_FRAG空闲碎片区</code>)，然后从 新的<code>FREE_FRAG空闲碎片区</code> 中取一些零碎的⻚把数据插进去。之后不同的段使用零碎⻚的时候都从该区中取，<strong>直到该区中没有空闲页面，然后该区的状态就变成了<code>FULL_FRAG</code></strong> 。</li></ul><h1 id="引出-XDES-Entry-链表：-lant-3种区状态链表"><a href="#引出-XDES-Entry-链表：-lant-3种区状态链表" class="headerlink" title="引出 XDES Entry 链表：(lant: 3种区状态链表)"></a>引出 <code>XDES Entry 链表</code>：(lant: 3种<code>区状态</code>链表)</h1><p>现在的问题是你怎么知道表空间里的哪些区是FREE的，哪些区的状态是FREE_FRAG的，哪些区是FULL_FRAG的?<br>要知道表空间的大小是可以不断增大的，当增⻓到GB级别的时候，区的数量也就上千了，我们总不能每次都遍历这些区对应的 <code>XDES Entry结构</code>(查看其 <code>state</code>状态) 吧?</p><p>这时候就是 <code>XDES Entry结构</code> 中的<code>List Node部分</code>发挥奇效的时候了，我们可以通过List Node中的指针做下面三件事:</p><ul><li>把 <code>状态为FREE的区</code> 对应的 <code>XDES Entry结构</code> 通过 <code>List Node</code> 连接成一个链表，称之为 <code>FREE链表</code>；</li><li>把 <code>状态为FREE_FRAG的区</code> 对应的 <code>XDES Entry结构</code> 通过 <code>List Node</code> 连接成一个链表，称之为 <code>FREE_FRAG链表</code>；</li><li>把 <code>状态为FULL_FRAG的区</code> 对应的 <code>XDES Entry结构</code> 通过 <code>List Node</code> 连接成一个链表，称之为 <code>FULL_FRAG链表</code>；</li></ul><p>这样每当我们想找一个<code>FREE_FRAG状态</code>的区时，就直接把 <code>FREE_FRAG链表</code> 的头节点拿出来，从这个节点<code>对应的区</code>中取一些零碎的⻚来插入数据，当这个节点对应的区用完时，就修改一下这个节点的State字段的值，然后从FREE_FRAG链表中移到FULL_FRAG链表中。<br>同理，如果 <code>FREE_FRAG链表</code> 中一个节点都没有，那么就直接从 <code>FREE链表</code> 中取一个节点移动到 <code>FREE_FRAG链表</code> 的状态，并修改该节点的STATE字段值为FREE_FRAG，然后从这个节点对应的区中获取零碎的⻚就好了。<br>当<code>段</code>中数据已经占满了32个零散的⻚后，就直接申请完整的区来插入数据了。</p><p>lant小结:<br>我这里给 <code>XDES Entry 链表</code> 叫 <code>XDES Entry 状态链表</code><br>其实 3种<code>XDES Entry 链表</code> 就是根据<code>区</code>的状态，将 相同状态的<code>区</code> 对应的 <code>XDES Entry 结构</code> 连起来组成的三种状态链表。<br>这样，无论我们需要哪种状态的区，直接找到对应的状态链表，就能快速地拿到处于该状态的区，而不用遍历表空间的所有区才能拿到你想要的那个装态的区。</p><h1 id="申请完整的区"><a href="#申请完整的区" class="headerlink" title="申请完整的区"></a>申请完整的区</h1><p>在<code>段</code>中数据已经占满32个零碎的页后，我们就可以申请完整的区来插入数据了。</p><h1 id="引出-段状态链表：-每个段下都有3类状态链表"><a href="#引出-段状态链表：-每个段下都有3类状态链表" class="headerlink" title="引出 段状态链表：(每个段下都有3类状态链表)"></a>引出 <code>段状态链表</code>：(每个段下都有3类状态链表)</h1><p>还是那个问题，那么多区，我们怎么知道哪些区已经是属于哪个段的了呢?<br><span style="font-weight:600;color:#f8b500;"><br>lant: 毕竟你不能随便拿个有空闲页的区就去用了，因为该区可能已经被别的段使用了(属于别的段了)，你肯定要保证每个段使用的区都是属于自己的段(这样段中的数据才会尽可能在物理上连续，减少随机IO)；<br>其次，即便你取到的区属于当前段，但也可能已经没有空闲页了。<br></span><br>那咋办？再遍历各个XDES Entry结构，查看<code>区状态</code>和<code>区所属的段ID1</code>? </p><p>遍历是不可能的，这辈子都不可能遍历的，有<code>链表</code>还遍历个毛线啊。</p><p>所以我们这里可以根据<code>段号</code>(也就 是Segment ID)来建立链表，有多少个段就建多少个链表?<br>因为一个段中可以有好多个区，有的区是完全空闲的，有的区还有一些⻚面可以用，有的区已经没有空闲⻚面可以用了，所以设计InnoDB的大叔们为每个段中的区对应的XDES Entry结构建立了三个链表:</p><ul><li><code>FREE (段)链表</code>: <code>同一个段</code>中，<code>所有⻚面都是空闲的区</code> 对应的 <code>XDES Entry结构</code> 会被加入到这个链表。注意和直属于表空间的FREE链表区别开了，此处的FREE链表是附属于某个段的。</li><li><code>NOT_FULL (段)链表</code>: <code>同一个段</code>中，<code>仍有空闲空间的区</code> 对应的 <code>XDES Entry结构</code> 会被加入到这个链表。</li><li><code>FULL (段)链表</code>: <code>同一个段</code>中，<code>已经没有空闲空间的区</code> 对应的 <code>XDES Entry结构</code> 会被加入到这个链表。</li></ul><p>再次强调一遍，每一个索引都对应两个段，每个段都会维护上述的3个链表。</p><blockquote><p>假设表t共有两个索引，一个聚簇索引，一个二级索引idx_c2，每个索引都有 <code>叶子节点段</code> 和 <code>非叶子节点段</code> 2个段，所以这个表共有4个段，每个段都会维护上述3个链表，所以这个表共需要维护12个链表。</p></blockquote><p>所以<code>段</code>在数据量比较大时插入数据的话，会先获取NOT_FULL链表的头节点，直接把数据插入这个头节点对应的区中即可，如果该区的空间已经被用完，就把该节点移到FULL链表中。</p><blockquote><p>Tip<br>lant: 当然，无论是<code>直属于 表空间 的链表</code> 还是 <code>属于 段 的链表</code>, 我估计一开始都是从 Free状态链表那里取直属于表空间的Free状态的区 新的空闲区的。</p></blockquote><h1 id="链表基节点-List-Base-Node"><a href="#链表基节点-List-Base-Node" class="headerlink" title="链表基节点 List Base Node"></a>链表基节点 <code>List Base Node</code></h1><p>上边介绍了一堆链表，可我们怎么在表空间中找到这些链表呢，或者说怎么找到某个链表的头节点或者尾节点在表空间中的位置呢?<br>设计 InnoDB的大叔当然考虑了这个问题，他们设计了一个叫<code>List Base Node</code>的结构，翻译成中文就是链表的基节点。<br>这个结构中包含了链表的头节点和尾节点的指针以及这个链表中包含了多少节点的信息，示意图如下:<br><img src="/images/MySQL/9.0/8.png" width="500px" style="margin-left:0px;border: 1px solid #ccc;border-radius: 5px;"/></p><p>我们上边介绍的 <strong><code>每个链表</code>都对应这么一个 <code>List Base Node结构</code></strong> ， 其中:</p><ul><li><code>List Length</code>表明该链表一共有多少节点；</li><li><code>First Node Page Number</code> 和 <code>First Node Offset</code> 表明该链表的头节点在表空间中的位置；</li><li><code>Last Node Page Number</code> 和 <code>Last Node Offset</code> 表明该链表的尾节点在表空间中的位置。</li></ul><p>一般我们把某个链表对应的 <code>List Base Node结构</code> 放置在表空间中固定的位置(后面会介绍)，这样想找定位某个链表就变得so easy啦。</p><h1 id="链表小结-📌"><a href="#链表小结-📌" class="headerlink" title="链表小结 📌"></a>链表小结 📌</h1><div style="font-weight:500;border: 1px solid #33b045;border-radius: 5px;padding:10px 0 0 10px;"><ol><li><p>综上所述，<code>表空间</code> 是由若干个<code>区</code> 组成的，<code>每个区</code>都对应一个<code>XDES Entry的结构</code>；</p></li><li><p><code>直属于表空间</code>的区对应的<code>XDES Entry结构</code>可以分成<code>FREE</code>、<code>FREE_FRAG</code>和<code>FULL_FRAG</code>这3个链表；</p></li><li><p>每个<code>段</code>可以拥有若干个区，每个段中的区对应的XDES Entry结构可以分成 <code>FREE</code>、<code>NOT_FULL</code> 和 <code>FULL</code> 这3个链表；</p></li><li><p>上面每个链表都对应一个<code>List Base Node的结构</code>，这个结构里记录了链表的头、尾节点的位置以及该链表中包含的节点数；</p></li></ol><p>正是因为这些链表的存在，管理这些区才变成了一件so easy的事情。</p></div>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;到现在为止，我们已经提出的概念五花八⻔(像 &lt;code&gt;区&lt;/code&gt;、&lt;code&gt;碎片区&lt;/code&gt;、&lt;code&gt;段&lt;/code&gt;、&lt;code&gt;附属于段的区&lt;/code&gt;、区对应的&lt;code&gt;XDES Entry结构&lt;/code&gt;)。&lt;br&gt;我们把事情搞这么麻烦，初心</summary>
      
    
    
    
    <category term="MySQL 读书笔记" scheme="http://rymuscle.github.io/categories/MySQL-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="MySQL" scheme="http://rymuscle.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>9.2 InnoDB的表空间 之 独立表空间结构(2)</title>
    <link href="http://rymuscle.github.io/2021/10/26/MySQL%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/9.2%20InnoDB%E7%9A%84%E8%A1%A8%E7%A9%BA%E9%97%B4%20%E4%B9%8B%20%E7%8B%AC%E7%AB%8B%E8%A1%A8%E7%A9%BA%E9%97%B4%E7%BB%93%E6%9E%84(2)/"/>
    <id>http://rymuscle.github.io/2021/10/26/MySQL%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/9.2%20InnoDB%E7%9A%84%E8%A1%A8%E7%A9%BA%E9%97%B4%20%E4%B9%8B%20%E7%8B%AC%E7%AB%8B%E8%A1%A8%E7%A9%BA%E9%97%B4%E7%BB%93%E6%9E%84(2)/</id>
    <published>2021-10-26T10:42:11.000Z</published>
    <updated>2024-04-21T06:19:47.087Z</updated>
    
    <content type="html"><![CDATA[<h1 id="区的分类"><a href="#区的分类" class="headerlink" title="区的分类"></a>区的分类</h1><p>通过上边一通唠叨，大家知道了<code>表空间</code>的是由<code>若干个区</code>组成的，这些区大体上可以分为4种类型:</p><ul><li><code>有剩余空间的碎片区</code>: 表示碎片区中还有可用的⻚面;</li><li><code>没有剩余空间的碎片区</code>: 表示碎片区中的所有⻚面都被使用，没有空闲⻚面;</li><li><code>空闲的区</code>: 区中⻚面还没有被使用过;</li><li><code>附属于某个段的区</code>: 每一个索引都可以分为<code>叶子节点段</code>和<code>非叶子节点段</code>，在这些段中的数据量很大时 <strong>就会使用区来作为基本的分配单位</strong>。这些区中的页面完全用来存储该段中的数据。</li></ul><p>这4种类型的区也可以被称为区的4种状态(State)，设计InnoDB 的大叔们为这4种状态的区定义了特定的名词儿:</p><ul><li><code>FREE_FRAG</code> 有剩余空间的碎片区</li><li><code>FULL_FRAG</code> 没有剩余空间的碎片区</li><li><code>FREE</code> 空闲的区（有空闲页就行）</li><li><code>FSEG</code> 附属于某个段的区</li></ul><p>需要再次强调一遍的是，处于<code>FREE</code>、<code>FREE_FRAG</code>以及<code>FULL_FRAG</code> 这三种状态的区都是独立直属于<code>表空间</code>的; 而处于<code>FSEG</code>状态的区是附属于某个段的。</p><blockquote><p>Tips:<br>如果把表空间比作是一个集团军，段就相当于师，区就相当于团。<br>一般的团都是隶属于某个师的，就像是处于<code>FSEG</code>的区全都隶属于某个段，而处于<code>FREE</code>、<code>FREE_FRAG</code>以及<code>FULL_FRAG</code>这三种状态的区却直接隶属于表空间，就像独立团直接听命于军部一样。</p></blockquote><h1 id="区对应的-XDES-Entry-结构"><a href="#区对应的-XDES-Entry-结构" class="headerlink" title="区对应的 XDES Entry 结构"></a>区对应的 <code>XDES Entry</code> 结构</h1><p>为了方便管理这些区，设计InnoDB的大叔设计了一个称为 <code>XDES Entry</code>的结构(全称是Extent Descriptor Entry)。<br><strong>每一个区都对应着一个XDES Entry结构 ，这个结构记录了对应的区的一些属性</strong>。 先通过下图对这个结构有个大致的了解:</p><blockquote><img src="/images/MySQL/9.0/3.png" width="500px" style="margin-left:0px;border: 1px solid #ccc;border-radius: 5px;"/></blockquote><blockquote><ul><li><p><code>Segment ID(8字节)</code>:<br> 表示该区所在的段(每一个段都有一个唯一ID)。当然前提是该区已经被分配给某个段了，不然的话该字段的值没啥意义。</p></li><li><p><code>List Node(12字节)</code>:<br>这个部分可以将若干个 <code>XDES Entry结构</code> 串联成一个链表，大家看一下这个List Node的结构:</p><img src="/images/MySQL/9.0/4.png" width="400px" style="margin-left:0px;border: 1px solid #ccc;border-radius: 5px;"/>把一些XDES Entry结构连成一个链表有啥用?稍安勿躁，我们稍后唠叨XDES Entry结构组成的链表问题。</li><li><p><code>State(4字节)</code>:<br>这个字段表明区的状态。可选的值就是我们前边说过的那4个，分别是:<code>FREE</code>、<code>FREE_FRAG</code>、<code>FULL_FRAG</code>和<code>FSEG</code>。</p></li><li><p><code>Page State Bitmap(16字节)</code>:<br>这个部分共占用16个字节(128个比特位)。我们说一个区默认有64个⻚，这128个比特位被划分为64个部分，每个部分2个比特位，对应区中的一个⻚。 比如Page State Bitmap部分的第1和第2个比特位对应着区中的第1个⻚面，第3和第4个比特位对应着区中的第2个⻚面，依此类推，<br>这两个比特位的第一个位表示对应的⻚是否是空闲的，第二个比特位还没有用。</p></li></ul></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;区的分类&quot;&gt;&lt;a href=&quot;#区的分类&quot; class=&quot;headerlink&quot; title=&quot;区的分类&quot;&gt;&lt;/a&gt;区的分类&lt;/h1&gt;&lt;p&gt;通过上边一通唠叨，大家知道了&lt;code&gt;表空间&lt;/code&gt;的是由&lt;code&gt;若干个区&lt;/code&gt;组成的，这些区大体上可以</summary>
      
    
    
    
    <category term="MySQL 读书笔记" scheme="http://rymuscle.github.io/categories/MySQL-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="MySQL" scheme="http://rymuscle.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>9.1 InnoDB的表空间 之 独立表空间结构(1)</title>
    <link href="http://rymuscle.github.io/2021/10/26/MySQL%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/9.1%20InnoDB%E7%9A%84%E8%A1%A8%E7%A9%BA%E9%97%B4%20%E4%B9%8B%20%E7%8B%AC%E7%AB%8B%E8%A1%A8%E7%A9%BA%E9%97%B4%E7%BB%93%E6%9E%84(1)/"/>
    <id>http://rymuscle.github.io/2021/10/26/MySQL%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/9.1%20InnoDB%E7%9A%84%E8%A1%A8%E7%A9%BA%E9%97%B4%20%E4%B9%8B%20%E7%8B%AC%E7%AB%8B%E8%A1%A8%E7%A9%BA%E9%97%B4%E7%BB%93%E6%9E%84(1)/</id>
    <published>2021-10-26T05:19:37.000Z</published>
    <updated>2024-04-21T06:19:47.086Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>我们知道InnoDB支持许多种类型的表空间，本章重点关注 <code>独立表空间</code> 和 <code>系统表空间</code> 的结构。<br>它们的结构比较相似，但是由于 <code>系统表空间</code> 中额外包含了一些关于整个系统的信息，所以我们先挑简单一点的 <code>独立表空间</code> 来聊，稍后再说<code>系统表空间</code>的结构。</p></blockquote><h1 id="区-extent-的概念：为了顺序IO"><a href="#区-extent-的概念：为了顺序IO" class="headerlink" title="区(extent)的概念：为了顺序IO"></a>区(extent)的概念：为了<code>顺序IO</code></h1><blockquote><p>表空间 中的 ⻚ 实在是太多了，为了更好的管理这些⻚，设计InnoDB的大叔们提出了<code>区(extent)</code>的概念。<br>对于16KB的⻚来说，<strong>连续的64个⻚</strong> 就是一个区，也就是说一个区默认占用1MB空间大小。</p></blockquote><hr><blockquote><p><strong>为啥好端端地提出一个<code>区</code>的概念呢？</strong></p><p>我们以前学到的<code>InnoDB存储结构</code>的相关知识大致是:<br>表中的记录存储到⻚里，然后⻚作为节点组成B+树，这个B+树就是索引，然后吧啦吧啦一堆聚簇索引和二级索引的区别。这套路也没啥不妥的呀~</p><p>是的，如果我们表中数据量很少的话，比如说你的表中只有几十条、几百条数据的话，的确用不到<code>区</code>的概念，因为简单的几个⻚就能把对应的数据存储起来。但是你架不住表里的记录越来越多呀。</p><p>我们每向表中插入一条记录，本质上就是向该表的<code>聚簇索引</code>以及<code>所有二级索引</code>代表的B+树的节点中插入数据。<br>而 B+树的每一层中的⻚都会形成一个双向链表 ，<span style="color:#f8b500 ;"> <strong>如果是以⻚为单位来分配存储空间的话， 双向链表相邻的两个⻚之间的物理位置可能离得非常远</strong></span> 。</p><p>我们介绍B+树索引的适用场景的时候特别提到 <strong>范围查询只需要定位到最左边的记录和最右边的记录，然后沿着双向链表一直扫描就可以了</strong> 。 <span style="color:#FF416C ;">而如果双向链表中相邻的两个⻚的物理位置不连续，对于传统机械硬盘来说，需要重新定位磁头的位置，就是所谓的随机I&#x2F;O，这样会影响磁盘的性能。<code>随机I/O</code>是非常慢的。</span> 所以 <strong>我们应该尽量让链表中相邻的⻚的物理位置也相邻</strong> ，这样进行范围查询时，扫描叶子节点中大量记录时才可以使用<code>顺序I/O</code>。</p></blockquote><p>所以才引入了<code>区(extent)</code>的概念，<strong>一个区就是在物理位置上连续的64个⻚</strong>。<br><strong>在表中数据量大的时候，为某个索引分配空间的时候就 <code>不再按照⻚为单位分配了</code> ，而是 <code>按照区为单位分配</code>，甚至在表中的数据十分非常特别多的时候，可以 <code>一次性分配多个连续的区</code>。</strong><br>虽然可能造成一点点空间的浪费(数据不足填充满整个区)，但是从性能⻆度看，可以消除很多的<code>随机I/O</code>，功大于过嘛!</p><hr><h1 id="独立表空间的结构"><a href="#独立表空间的结构" class="headerlink" title="独立表空间的结构"></a><code>独立表空间</code>的结构</h1><p>不论是<code>系统表空间</code>还是<code>独立表空间</code>，都可以看成是由若干个<code>区</code>组成的，<strong>每256个区被划分成一组</strong> , 示意图如下：<br><img src="/images/MySQL/9.0/1.png" alt="独立表空间结构图" width="400px" style="margin-left:0; border: 1px solid #ccc;border-radius: 5px;"/></p><hr><p>每个<code>组</code>里的头几个⻚面(lant:自然也是位于该组的<code>第一个区</code>里)的类型都是类似的:<br><img src="/images/MySQL/9.0/2.png" width="550px" style="margin-left:0; border: 1px solid #ccc;border-radius: 5px;"/></p><blockquote><p>第一个组中的最开始的3个⻚面(也就是说extent 0这个区最开始的3个⻚面)的类型是固定的，分别是:</p><ul><li><code>FSP_HDR类型的页</code>: 这个类型的⻚面是用来登记 <code>整个表空间的一些整体属性</code> 以及 <code>本组256个区的属性</code>，稍后详细唠叨。 需要注意的一点是，<strong>整个表空间只有一个<code>FSP_HDR类型</code>的⻚面</strong>。</li><li><code>IBUF_BITMAP类型的页</code>: 这个类型的⻚面是存储本组所有区的所有⻚面关于 <code>INSERT BUFFER</code> 的信息。当然，你现在不用知道啥是个INSERT BUFFER。</li><li><code>INODE类型的页</code>: 这个类型的⻚面存储了许多称为INODE的数据结构，还是那句话，现在你不需要知道啥是个INODE， 后边儿会说到你吐。</li></ul></blockquote><blockquote><p>其余各组最开始的2个⻚面的类型是固定的，分别是:</p><ul><li><code>XDES类型</code>:全称是extent descriptor，用来登记<code>本组256个区</code>的属性;<br><strong>上边介绍的<code>FSP_HDR类型</code>的⻚面其实和<code>XDES类型</code>的⻚面的作用类似，只不过<code>FSP_HDR类型</code>的⻚面还会额外存储一些表空间的属性。</strong></li><li>❓<code>IBUF_BITMAP类型</code>:上边介绍过了。</li></ul></blockquote><hr><p>好了，宏观的结构介绍完了，里边儿的名词大家也不用记清楚，只要大致记得:</p><ul><li><code>表空间</code>被划分为许多连续的<code>区</code>，每个区默认由<code>64个</code>⻚组成</li><li>每<code>256个区</code>又被划分为<code>一组</code>，每个组的最开始的几个⻚面类型是固定的就好了。</li></ul><h1 id="段-segment-的概念：还是为了顺序IO-😁"><a href="#段-segment-的概念：还是为了顺序IO-😁" class="headerlink" title="段(segment) 的概念：还是为了顺序IO 😁"></a>段(segment) 的概念：还是为了<code>顺序IO</code> 😁</h1><p>然而事情到这里并没有结束，因为我们之前提到的范围查询<strong>是对B+树<code>叶子节点</code>中的记录进行顺序扫描</strong> 。<br><strong>而如果你在以页为单位存储记录时，如果不区分<code>普通记录页</code>和<code>目录页</code>(也就是不区分<code>叶子节点</code>和<code>非叶子节点</code>) ，无论什么类型的节点都统统放到申请到的区中的话，那范围扫描的效果就大打折扣了。</strong></p><p>(lant: 提出<code>区</code>的概念本来就是为了让<code>存放叶子节点的页</code>在物理上尽量连续，减少随机IO，结果现在<code>存放叶子节点的页</code>和<code>存放非叶子节点的页</code>是混在一起在存到申请的<code>区</code>中的，这样<code>存放叶子节点的页</code>在物理上又不是顺序了)。</p><p>所以设计InnoDB的大叔们对B+树的<code>叶子节点</code>和<code>非叶子节点</code>进行了区别对待，也就是说 <strong><code>叶子节点</code>有自己独有的区</strong> ， <strong><code>非叶子节点</code>也有自己独有的区</strong> 。(lant: 这样，<code>存放叶子节点的页</code>在物理上就会尽量被连续存放起来，毕竟申请的<code>区</code>里的页都会用来存储<code>叶子节点</code>)。<br>存放叶子节点的<code>区的集合</code> 和 存放非叶子节点的<code>区的集合</code> 都被称为 <code>段</code>。 </p><p><strong>也就是说一个索引会生成2个段，一个<code>叶子节点段</code>，一个<code>非叶子节点段</code></strong> 。</p><h1 id="碎片区-的概念"><a href="#碎片区-的概念" class="headerlink" title="碎片区 的概念"></a>碎片区 的概念</h1><p>默认情况下，InnoDB引擎的表只有一个<code>聚簇索引</code>，会生成2个段。<br>而<code>段</code>是以<code>区</code>为单位申请存储空间的，一个区默认占用1M存储空间，所以默认情况下一个只存了几条记录的小表也需要2M的存储空间么? 以后每次添加一个索引都要申请2M的存储空间么? 这对于存储记录比较少的表简直是天大的浪费。</p><hr><p>设计InnoDB 的大叔们都挺节俭的，当然也考虑到了这种情况。<br>这个问题的症结在于 到现在为止我们都是认为 <code>区</code>是被整个分配给某一个<code>段</code> 的(即使<code>段</code>的数据填不满<code>区</code>中所有的<code>⻚面</code>)。</p><p>但是为了考虑 <code>以完整的区为单位分配给某个段</code> 对于数据量较小的表太浪费存储空间的这种情况，设计InnoDB的大叔们提出了一个<code>碎片(fragment)区</code>的概念。<br><strong>在一个碎片区中的⻚，不一定会全部分配给某个段；碎片区中的⻚可以用于不同的目的，比如有些⻚用于段A，有些⻚用于段B，有些⻚甚至哪个段都不属于</strong> 。</p><hr><div style="font-weight:500;border: 1px solid #33b045;border-radius: 5px;padding:20px 0 0 25px;"><span style="color:#f8b500;">碎片区` 直属于 `表空间`，并不属于任何一个`段`。</span>所以此后为某个`段`分配存储空间的策略是这样的:<li style="color:#f8b500;">在刚开始向表中插入数据的时候，`段`是从某个`碎片区`以`单个⻚面为单位`来分配存储空间的；</li><li style="color:#f8b500;">当某个段已经占用了32个碎片区⻚面之后，就会以完整的区为单位来分配存储空间；</li><p>所以现在 <code>段</code> 不能仅定义为是 <code>某些区的集合</code>，更精确的应该是 <code>某些零散的⻚面</code>以及 <code>一些完整的区</code> 的集合。</p></div><p>另外，除了索引的<code>叶子节点段</code>和<code>非叶子节点段</code>之外，InnoDB中还有为存储一些特殊的数据而定义的段，比如 <code>回滚段</code>，当然我们现在并不关心别的类型的段，现在只需要知道段是一些零散的⻚面以及一些完整的区的集合就好了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;我们知道InnoDB支持许多种类型的表空间，本章重点关注 &lt;code&gt;独立表空间&lt;/code&gt; 和 &lt;code&gt;系统表空间&lt;/code&gt; 的结构。&lt;br&gt;它们的结构比较相似，但是由于 &lt;code&gt;系统表空间&lt;/code&gt; 中额外包含了一些关于整个系</summary>
      
    
    
    
    <category term="MySQL 读书笔记" scheme="http://rymuscle.github.io/categories/MySQL-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="MySQL" scheme="http://rymuscle.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>9.0 InnoDB的表空间 之 页相关知识回顾</title>
    <link href="http://rymuscle.github.io/2021/10/23/MySQL%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/9.0%20InnoDB%E7%9A%84%E8%A1%A8%E7%A9%BA%E9%97%B4%20%E4%B9%8B%20%E9%A1%B5%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86%E5%9B%9E%E9%A1%BE/"/>
    <id>http://rymuscle.github.io/2021/10/23/MySQL%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/9.0%20InnoDB%E7%9A%84%E8%A1%A8%E7%A9%BA%E9%97%B4%20%E4%B9%8B%20%E9%A1%B5%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86%E5%9B%9E%E9%A1%BE/</id>
    <published>2021-10-23T13:16:21.000Z</published>
    <updated>2024-04-21T06:19:47.085Z</updated>
    
    <content type="html"><![CDATA[<h1 id="表空间-回顾"><a href="#表空间-回顾" class="headerlink" title="表空间 回顾"></a><code>表空间</code> 回顾</h1><p>通过前边的学习，大家知道， <strong><code>表空间</code>是一个<code>抽象</code>的概念</strong> ，对于 <code>系统表空间</code> 来说，对应着<code>文件系统</code>中<code>一个或多个实际文件</code>;对于 <code>每个独立表空间</code> 来说，对应着<code>文件系统</code>中一个名为 <code>表名.ibd</code> 的实际文件(InnoDB)。</p><blockquote><p>(lant: 其实可以认为 <code>表空间</code>就是个抽象出来的概念，它代表的其实就是 <code>数据目录</code>(真实存在)下<code>与数据库名同名的子目录</code>(真实存在)下的 <code>表名.ibd文件 / 表名.MYD+表名.MYI文件</code>(真实存在))</p></blockquote><blockquote><p>大家可以把<code>表空间</code>想象成被切分为许许多多个<code>⻚的池子</code>，当我们想为某个表插入一条记录的时候，就从池子中捞出一个对应的⻚来把数据写进去。</p></blockquote><h1 id="⻚面类型-回顾"><a href="#⻚面类型-回顾" class="headerlink" title="⻚面类型 回顾"></a><code>⻚面类型</code> 回顾</h1><p>可参考 <a href="2021/09/28/MySQL%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/5.5%20%E9%80%9A%E7%94%A8%E9%A1%B5%E7%BB%93%E6%9E%84%20%E4%B9%8B%20File%20Header(%E6%96%87%E4%BB%B6%E5%A4%B4)%E9%83%A8%E5%88%86/">5.5 通用页 结构 之 File Header(文件头)部分</a><br>再一次强调，InnoDB 是以⻚为单位管理存储空间的，我们的聚簇索引(也就是完整的表数据)和其他的二级索引都是以B+树的形式保存到<code>表空间</code>的，而B+树的节点就是数据⻚。<br>我们前边说过，这个<code>数据⻚</code>的类型名其实是:<code>FIL_PAGE_INDEX</code>，除了这种存放索引数据的⻚面类型之外，InnoDB 也为了不同的目的设计了若干种不同类型的⻚面，为了唤醒大家的记忆，我们再一次把各种常用的<code>⻚面类型</code>(<code>FIL_PAGE_TYPE</code>)提出来:<br><img src="/images/MySQL/9.0/5.png" width="550px" style="border: 1px solid #ccc;border-radius: 5px;"/></p><p>因为⻚面类型前边都有个<code>FIL_PAGE</code>或者<code>FIL_PAGE_TYPE</code>的前缀， 为简便起⻅我们后边唠叨⻚面类型的时候就把这些前缀省略掉了，比方说FIL_PAGE_TYPE_ALLOCATED类型称为ALLOCATED类型，<code>FIL_PAGE_INDEX</code>类型称为<code>INDEX类型</code>。</p><h1 id="⻚面通用部分-回顾"><a href="#⻚面通用部分-回顾" class="headerlink" title="⻚面通用部分 回顾"></a>⻚面通用部分 回顾</h1><p>我们前边说过数据⻚，也就是INDEX类型的⻚由7个部分组成，其中的两个部分是所有类型的⻚面都通用的。在这里重新强调一遍，任何类型的⻚面都有下边这种通用的结构:<br><img src="/images/MySQL/9.0/6.png" width="550px" style="border: 1px solid #ccc;border-radius: 5px;"/><br>从上图中可以看出，任何类型的⻚都会包含这两个部分: </p><ul><li><code>File Header</code>: 记录⻚面的一些通用信息</li><li><code>File Trailer</code>: 校验⻚是否完整，保证从内存到磁盘刷新时内容的一致性。</li></ul><hr><p>对于File Trailer我们不再做过多强调，全部忘记了的话可以到数据⻚的那一章回顾一下。我们这里再强调一遍File Header的各个组成部分:<br><img src="/images/MySQL/9.0/7.png" width="550px" style="border: 1px solid #ccc;border-radius: 5px;"/><br>现在除了名称里边儿带有LSN的两个字段大家可能看不懂以外，其他的字段肯定都是倍儿熟了，不过我们仍要强调这么几点:</p><ul><li><strong>表空间中的每一个⻚都对应着一个⻚号，也就是FIL_PAGE_OFFSET，这个⻚号由4个字节组成，也就是32个比特位，所以页号最大也就到 2^32，所以一个表空间最多可以拥有2^32个⻚。如果按照⻚的默认大小16KB来算，一个表空间最多支持64TB的数据。(表空间的第一个⻚的⻚号为0，之后的⻚号分别是1，2，3…依此类推)</strong></li><li>某些类型的⻚可以组成链表，链表中的⻚可以不按照物理顺序存储，而是根据FIL_PAGE_PREV和FIL_PAGE_NEXT来存储上一个⻚和下一个⻚的⻚号。需要注意的是，这两个字段主要是为了<code>INDEX类型</code>的⻚，也就是我们之前一直说的数据⻚建立B+树后，为每层节点建立双向链表用的，一般类型的⻚是不使用这两个字段的。</li><li>每个⻚的类型由FIL_PAGE_TYPE表示，比如像数据⻚的该字段的值就是0x45BF，我们后边会介绍各种不同类型的⻚，不同类型的⻚在该字段上的值是不同的。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;表空间-回顾&quot;&gt;&lt;a href=&quot;#表空间-回顾&quot; class=&quot;headerlink&quot; title=&quot;表空间 回顾&quot;&gt;&lt;/a&gt;&lt;code&gt;表空间&lt;/code&gt; 回顾&lt;/h1&gt;&lt;p&gt;通过前边的学习，大家知道， &lt;strong&gt;&lt;code&gt;表空间&lt;/code&gt;是一个</summary>
      
    
    
    
    <category term="MySQL 读书笔记" scheme="http://rymuscle.github.io/categories/MySQL-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="MySQL" scheme="http://rymuscle.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>8.0 数据的家--MySQL的数据目录</title>
    <link href="http://rymuscle.github.io/2021/10/22/MySQL%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/8.0%20%E6%95%B0%E6%8D%AE%E7%9A%84%E5%AE%B6--MySQL%E7%9A%84%E6%95%B0%E6%8D%AE%E7%9B%AE%E5%BD%95/"/>
    <id>http://rymuscle.github.io/2021/10/22/MySQL%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/8.0%20%E6%95%B0%E6%8D%AE%E7%9A%84%E5%AE%B6--MySQL%E7%9A%84%E6%95%B0%E6%8D%AE%E7%9B%AE%E5%BD%95/</id>
    <published>2021-10-22T11:11:32.000Z</published>
    <updated>2024-04-21T06:19:47.080Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数据库和文件系统的关系"><a href="#数据库和文件系统的关系" class="headerlink" title="数据库和文件系统的关系"></a>数据库和文件系统的关系</h1><blockquote><p>我们知道像 <code>InnoDB</code>、<code>MyISAM</code> 这样的存储引擎都是把表数据存储在磁盘上的，而<code>操作系统</code>用来管理磁盘的那个东东又被称为<code>文件系统</code>，所以直接点来说就是: 像 <code>InnoDB</code> 、 <code>MyISAM</code> 这样的存储引擎都是把表存储在<code>文件系统</code>上的。<br>当我们想读取数据时，这些<code>存储引擎</code>会从<code>文件系统</code>中把数据读出来返回给我们，当我们想写入数据时，这些<code>存储引擎</code>会把这些数据又写回<code>文件系统</code>。</p><p>所以，接下来就是要聊一下<code>InnoDB</code>和<code>MyISAM</code>这两个存储引擎的数据是如何在<code>文件系统</code>中存储的。</p></blockquote><h1 id="MySQL数据目录"><a href="#MySQL数据目录" class="headerlink" title="MySQL数据目录"></a>MySQL数据目录</h1><blockquote><p><code>MySQL服务器程序</code>在启动时会到<code>文件系统</code>的<code>某个目录</code>下加载一些文件，之后在运行过程中产生的数据也都会存储到<code>这个目录</code>下的某些文件中，这个目录就称为<code>数据目录</code>，我们下边就要详细唠唠这个目录下具体都有哪些重要的东⻄。</p></blockquote><h2 id="数据目录和安装目录的区别"><a href="#数据目录和安装目录的区别" class="headerlink" title="数据目录和安装目录的区别"></a><code>数据目录</code>和安装目录的区别</h2><blockquote><p>我们之前只接触过 <code>MySQL的安装目录</code>，而且重点强调过这个安装目录下非常重要的<code>bin目录</code>，它里边存储了许多关于控制<code>客户端程序</code>和<code>服务器程序</code>的命令(许多可执行文件，比如<code>mysql</code>，<code>mysqld</code>，<code>mysqld_safe</code>等等好几十个)。</p><p>而<code>数据目录</code>是用来存储MySQL在运行过程中产生的数据，一定要和<code>安装目录</code>区别开!</p></blockquote><h2 id="MySQL中的数据目录在哪儿？"><a href="#MySQL中的数据目录在哪儿？" class="headerlink" title="MySQL中的数据目录在哪儿？"></a>MySQL中的<code>数据目录</code>在哪儿？</h2><blockquote><p>那说了半天，MySQL中的<code>数据目录</code>到底在哪儿(数据到底被它存储到哪个目录了)？<br>其实<code>数据目录</code>对应着一个<code>系统变量 datadir</code>，我们在使用客户端与服务器建立连接之后查看这个系统变量的值就可以了:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SHOW VARIABLES LIKE &#x27;datadir&#x27;; </span><br><span class="line">+---------------+-----------------------+ </span><br><span class="line">| Variable_name | Value | </span><br><span class="line">+---------------+-----------------------+ </span><br><span class="line">| datadir | /usr/local/mysql/var | </span><br><span class="line">+---------------+-----------------------+ </span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure><p>从结果中可以看出，在我的计算机上MySQL的数据目录就是 <code>/usr/local/mysql/var</code>，你用你的计算机试试呗~</p></blockquote><h1 id="MySQL运行过程中会产生哪些数据"><a href="#MySQL运行过程中会产生哪些数据" class="headerlink" title="MySQL运行过程中会产生哪些数据?"></a>MySQL运行过程中会产生哪些数据?</h1><blockquote><ul><li>首先，它当然会包含我们创建的 <code>数据库</code>、<code>表</code>、<code>视图</code>、 <code>触发器</code>、<code>用户数据</code> …</li><li>除了这些用户数据， 为了程序更好的运行，MySQL也会创建一些其他的额外数据，我们接下来细细的品味一下这个数据目录下的内容。</li></ul></blockquote><h2 id="数据库在文件系统中的表示"><a href="#数据库在文件系统中的表示" class="headerlink" title="数据库在文件系统中的表示"></a><code>数据库</code>在<code>文件系统</code>中的表示</h2><p>每当我们使用 <code>CREATE DATABASE 数据库名</code> 创建一个数据库时，在<code>文件系统</code>上实际发生了什么呢?<br>其实很简单， <strong>每个数据库都对应<code>数据目录</code>下的一个子目录</strong> 。</p><blockquote><p>每当我们新建一个数据库时，MySQL会帮我们做这两件事儿:</p><ol><li>在<code>数据目录</code>下创建一个和<code>数据库名同名的子目录</code>(或者说是文件夹);</li><li>在与该数据库名同名的子目录下创建一个名为 <code>db.opt的文件</code>，这个文件中包含了该数据库的各种属性，比方说该数据库的字符集和比较规则是个啥。</li></ol><p>比方说我们查看一下在我的计算机上当前有哪些数据库:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; SHOW DATABASES;</span><br><span class="line">+--------------------+</span><br><span class="line">| Database           |</span><br><span class="line">+--------------------+</span><br><span class="line">| information_schema |</span><br><span class="line">| jm_taxi            |</span><br><span class="line">| mysql              |</span><br><span class="line">| performance_schema |</span><br><span class="line">| sys                |</span><br><span class="line">+--------------------+</span><br><span class="line">5 rows in set (0.00 sec)</span><br><span class="line">mysql&gt;</span><br></pre></td></tr></table></figure><p>可以看到在我的计算机上当前有5个数据库，其中 jm_taxi 数据库是我们自定义的，其余4个数据库是属于MySQL自带的系统数据库。<br>我们再看一下我的计算机上的数据目录下的内容:<br><img src="/images/MySQL/8.0/1.png" alt="TODO 到时候最好将MySQL版本替换成5.7，然后将例子和图片重新修改下"><br>当前MySQL服务器上的<code>数据目录</code>下的文件和子目录比较多哈，不过仍然能看到我们创建的数据库 jm_taxi 在<code>数据目录</code>下是有对应的<code>子目录</code>的。<br><code>数据目录</code>下的其他的文件和子目录，我们暂时先忽略它们的存在就好了。</p></blockquote><h2 id="表在文件系统中的表示"><a href="#表在文件系统中的表示" class="headerlink" title="表在文件系统中的表示"></a><code>表</code>在<code>文件系统</code>中的表示</h2><p>每个表的信息其实可以分为两种:</p><ol><li><code>表结构</code>信息<blockquote><p><code>表结构</code> 就是该表的名称是啥，表里边有多少列，每个列的数据类型是啥，有啥约束条件和索引，用的是啥字符集和比较规则吧啦吧啦的各种信息，这些信息都体现在了我们的建表语句中了。<br>为了保存这些信息，InnoDB和MyISAM这两种存储引擎都在<code>数据目录</code>下对应的<code>数据库子目录</code>下创建了一个<code>专⻔用于描述表结构的文件</code>，文件名是 <code>表名.frm</code> (这个后缀名为.frm是以二进制格式存储的，直接打开会是乱码的~);<br>(值得注意的是：MySQL8版本中的innodb存储引擎的表没有<code>.frm文件</code>。MySQL8开始删除了原来的frm文件，并采用 Serialized Dictionary Information (SDI),SDI信息源记录保存在ibd文件中。)</p></blockquote></li><li>表中的数据<blockquote><p>描述<code>表结构</code>的文件我们知道了，那表中的数据被存到什么文件中了呢?<br><strong>在这个问题上，不同的存储引擎就产生了分歧了</strong>，下边我们分别看一下InnoDB和MyISAM是用什么文件来保存表中数据的。</p></blockquote></li></ol><h1 id="InnoDB是如何存储表数据的"><a href="#InnoDB是如何存储表数据的" class="headerlink" title="InnoDB是如何存储表数据的"></a>InnoDB是如何存储表数据的</h1><blockquote><p>我们前边重点唠叨过InnoDB的一些实现原理，到现在为止我们应该熟悉下边这些东东:</p><ul><li>InnoDB 是使用<code>⻚</code>为基本单位来管理存储空间的，默认的⻚大小为16KB。</li><li>对于InnoDB存储引擎来说，每个索引都对应着一棵B+树，该B+树的每个节点都是一个数据⻚，<strong>数据⻚之间不必要是物理连续的</strong> ，因为数据⻚之间有<code>双向链表</code>来维护着这些⻚的顺序。</li><li>InnoDB的聚簇索引的叶子节点存储了完整的用户记录，也就是所谓的 <strong>索引即数据，数据即索引</strong> 。</li></ul></blockquote><h2 id="表空间-的概念"><a href="#表空间-的概念" class="headerlink" title="表空间 的概念"></a><code>表空间</code> 的概念</h2><blockquote><p>不过，为了更好的管理这些<code>⻚</code>，设计InnoDB的大叔们又提出了一个<code>表空间</code>或者<code>文件空间</code>(英文名:table space或者file space)的概念。<br>其实 <code>表空间</code> 是一个抽象的概念，它可以对应<code>文件系统</code>上一个或多个真实文件(不同表空间对应的文件数量可能不同);<br><strong>每一个表空间可以被划分为很多很多很多个⻚，我们的表数据就存放在某个表空间下的某些⻚里</strong> ;</p><p>设计InnoDB的大叔还将表空间划分为几种不同的类型，我们一个一个看一下。</p></blockquote><h2 id="系统表空间-system-tablespace"><a href="#系统表空间-system-tablespace" class="headerlink" title="系统表空间(system tablespace)"></a>系统表空间(system tablespace)</h2><p>这个所谓的<code>系统表空间</code>可以对应文件系统上一个或多个实际的文件。默认情况下，InnoDB会在 <code>数据目录</code> 下创建一个名为 <code>ibdata1</code>、<code>大小为12M</code>的文件，这个文件就是对应的<code>系统表空间</code>在<code>文件系统</code>上的表示。<br>之所以只有12M，那是因为这个文件是所谓的<code>自扩展文件</code>，也就是当不够用的时候它会自己增加文件大小~</p><blockquote><p>当然，如果你想让系统表空间对应文件系统上多个实际文件，或者仅仅觉得原来的<code>ibdata1</code>这个文件名难听，那可以在MySQL启动时配置对应的文件路径以及它们的大小，比如我们这样修改一下配置文件:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[server] </span><br><span class="line">innodb_data_file_path=data1:512M;data2:512M:autoextend</span><br></pre></td></tr></table></figure><p>这样在MySQL启动之后就会创建这两个512M大小的文件作为系统表空间，其中的autoextend表明这两个文件如果不够用会自动扩展data2文件的大小。</p><p>我们也可以把<code>系统表空间</code>对应的文件路径不配置到<code>数据目录</code>下，甚至可以配置到单独的磁盘分区上，涉及到的启动参数就是<code>innodb_data_file_path</code>和<code>innodb_data_home_dir</code>，具体的配置逻辑挺绕的，就不多唠叨了，知道改哪个参数可以修改系统表空间对应的文件，有需要的时候到官方文档里一查就好了。</p></blockquote><hr><blockquote><p>需要注意的一点是，在一个MySQL服务器中，<strong>系统表空间只有一份</strong> (可以配置 系统表空间 对应多个实际文件) 。从MySQL5.5.7到MySQL5.6.6之间的各个版本中，我们表中的数据都会被默认存储到这个系统表空间。</p></blockquote><h2 id="独立表空间-file-per-table-tablespace"><a href="#独立表空间-file-per-table-tablespace" class="headerlink" title="独立表空间(file-per-table tablespace)"></a>独立表空间(file-per-table tablespace)</h2><p>在MySQL5.6.6以及之后的版本中，InnoDB并不会默认的把各个表的数据存储到<code>系统表空间</code>中，而是为每一个表建立一个<code>独立表空间</code>，也就是说我们 <strong>创建了多少个表，就有多少个独立表空间</strong> 。</p><p>使用<code>独立表空间</code> 来存储表数据的话，会在该表所属<code>数据库对应的子目录</code>下创建一个表示该独立表空间的文件，文件名和表名相同，只不过添加了一个<code>.ibd</code>的扩展名而已，所以完整的文件名称就是: <code>表名.ibd</code></p><blockquote><p>比方说假如我们使用了独立表空间去存储 jm_taxi数据库下的 jm_member 表的话，那么在该表所在数据库对应的jm_taxi目录下会为jm_member表创建这两个文件: <code>jm_member.frm</code>、 <code>jm_member.ibd</code><br>其中 <code>jm_member.ibd文件</code> 就用来存储jm_member表中的数据和索引 (索引和数据在一起的哦，正所谓 索引即数据，数据即索引)。</p></blockquote><hr><p>当然我们也可以自己指定使用<code>系统表空间</code>还是<code>独立表空间</code>来存储数据，这个功能由启动参数<code>innodb_file_per_table</code>控制。</p><blockquote><p>比如说我们想刻意将表数据都存储到系统表空间时，可以在启动MySQL服务器的时候这样配置:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[server] </span><br><span class="line">innodb_file_per_table=0 // 0:代表使用系统表空间;1:代表使用独立表空间。 </span><br></pre></td></tr></table></figure><p>不过innodb_file_per_table参数只对新建的表起作用，对于已经分配了表空间的表并不起作用。</p></blockquote><hr><blockquote><p>如果我们想把已经存在系统表空间中的表转移到独立表空间，可以使用下边的语法:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE 表名 TABLESPACE [=] innodb_file_per_table; //其中中括号扩起来的=可有可无</span><br></pre></td></tr></table></figure><p>或者把已经存在独立表空间的表转移到系统表空间，可以使用下边的语法:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE 表名 TABLESPACE [=] innodb_system;  // 其中中括号扩起来的=可有可无</span><br></pre></td></tr></table></figure></blockquote><h2 id="其他类型的表空间"><a href="#其他类型的表空间" class="headerlink" title="其他类型的表空间"></a>其他类型的表空间</h2><blockquote><p>随着MySQL的发展，除了上述两种老牌表空间之外，现在还新提出了一些不同类型的表空间<br>比如 <code>通用表空间</code>(general tablespace)、<code>undo表空间</code>(undo tablespace)、<code>临时表空间</code> (temporary tablespace) …… 等等<br>具体情况我们等用到的时候再提</p></blockquote><h1 id="MyISAM是如何存储表数据的"><a href="#MyISAM是如何存储表数据的" class="headerlink" title="MyISAM是如何存储表数据的"></a>MyISAM是如何存储表数据的</h1><p>好了，唠叨完了<code>InnoDB</code>的<code>系统表空间</code>和<code>独立表空间</code>，现在轮到<code>MyISAM</code>了。</p><p>我们知道，和InnoDB的<code>索引和数据是一个东东</code>不同。MyISAM中的索引全部都是<code>二级索引</code>，<strong>该存储引擎的数据和索引是分开存放的</strong>。<br>所以MyISAM在<code>文件系统</code>中也是<strong>使用不同的文件</strong>来存储<code>数据</code>和<code>索引</code>的。<br>而且和InnoDB不同的是，MyISAM并没有什么所谓的<code>表空间</code>一说，表数据都存放到对应的<code>数据库子目录</code>下。</p><blockquote><p>假如 jm_member表 使用MyISAM存储引擎的话，那么在它所在数据库对应的 jm_taxi目录下会为 jm_member表 创建这三个文件: <code>jm_member.frm</code>、<code>jm_member.MYD</code>、<code>jm_member.MYI</code></p><ul><li>其中 <code>jm_member.MYD</code> 代表表的数据文件，也就是我们插入的用户记录;</li><li><code>jm_member.MYI</code> 代表表的索引文件，我们为该表创建的索引都会放到这个文件中。</li></ul></blockquote><h1 id="视图在文件系统中的表示"><a href="#视图在文件系统中的表示" class="headerlink" title="视图在文件系统中的表示"></a>视图在文件系统中的表示</h1><blockquote><p>我们知道MySQL中的视图其实是虚拟的表，也就是某个查询语句的一个别名而已，所以在存储视图的时候是不需要存储真实的数据的，只需要把它的结构存储起来就行了。<br>和表一样，描述视图结构的文件也会被存储到所属数据库对应的子目录下边，只会存储一个 <code>视图名.frm</code> 的文件。</p></blockquote><h1 id="其他的文件"><a href="#其他的文件" class="headerlink" title="其他的文件"></a>其他的文件</h1><p>除了我们上边说的这些用户自己存储的数据以外，<code>数据目录</code> 下还包括为了更好运行程序的一些额外文件，主要包括这几种类型的文件:</p><ul><li><code>服务器进程文件</code><blockquote><p>我们知道每运行一个MySQL服务器程序，都意味着启动一个进程。MySQL服务器会把自己的进程ID写入到一个文件中。</p></blockquote></li><li><code>服务器日志文件</code><blockquote><p>在服务器运行过程中，会产生各种各样的日志, 比如常规的 <code>查询日志</code>、<code>错误日志</code>、<code>二进制日志</code>、<code>redo日志</code>… 等 各种日志，这些日志各有各的用途，现在暂时先了解一下就可以了。</p></blockquote></li><li>默认&#x2F;自动生成的SSL和RSA证书和密钥文件<blockquote><p>主要是为了客户端和服务器安全通信而创建的一些文件， 大家看不懂可以忽略~</p></blockquote></li></ul><h1 id="文件系统对数据库的影响"><a href="#文件系统对数据库的影响" class="headerlink" title="文件系统对数据库的影响"></a>文件系统对数据库的影响</h1><p>因为MySQL的数据都是存在<code>文件系统</code>中的，就不得不受到文件系统的一些制约，这在<code>数据库和表的命名</code>、<code>表的大小和性能</code>方面体现的比较明显，比如下边这些方面:</p><ul><li>数据库名称和表名称不得超过文件系统所允许的最大⻓度。<blockquote><p>每个数据库都对应数据目录的一个子目录;<br>每个表都会在数据库子目录下产生一个和表名同名的<code>.frm文件</code>(如果是InnoDB的独立表空间或者使用MyISAM引擎还会有别的文件名称与表名一致)。</p></blockquote></li><li>特殊字符的问题<blockquote><p>为了避免因为数据库名和表名出现某些特殊字符而造成文件系统不支持的情况，MySQL会把数据库名和表名中所有除数字和拉丁字母以外的所有字符在文件名里都映射成 <code>@+编码值的形式</code> 作为文件名。</p></blockquote></li><li>文件⻓度受文件系统最大⻓度限制<blockquote><p>对于InnoDB的独立表空间来说，每个表的数据都会被存储到一个与表名同名的.ibd文件中;<br>对于MyISAM存储引擎来说，数据和索引会分别存放到与表同名的.MYD和.MYI文件中。<br>这些文件会随着表中记录的增加而增大，它们的大小受限于文件系统支持的最大文件大小。</p></blockquote></li></ul><h1 id="MySQL系统数据库简介"><a href="#MySQL系统数据库简介" class="headerlink" title="MySQL系统数据库简介"></a>MySQL系统数据库简介</h1><p>我们前边提到了MySQL的几个系统数据库，这几个数据库包含了 MySQL服务器运行过程中所需的一些信息以及一些运行状态信息， 我们现在稍微了解一下。</p><ul><li>mysql<blockquote><p>这个数据库贼核心，它存储了MySQL的用户账户和权限信息， 一些存储过程、事件的定义信息，一些运行过程中产生的日志信息，一些帮助信息以及时区信息等。</p></blockquote></li><li>information_schema<blockquote><p>这个数据库保存着MySQL服务器维护的所有其他数据库的信息，比如有哪些表、哪些视图、哪些触发器、哪些列、哪些索引吧啦吧啦。这些信息并不是真实的用户数据，而是一些描述性信息，有时候也称之为元数据。</p></blockquote></li><li>performance_schema<blockquote><p>这个数据库里主要保存MySQL服务器运行过程中的一些状态信息，算是对MySQL服务器的一个性能监控。包括统计最近执行了哪些语句，在执行过程的每个阶段都花费了多⻓时间，内存的使用情况等等信息。</p></blockquote></li><li>sys<blockquote><p>这个数据库主要是通过视图的形式把information_schema 和performance_schema结合起来，让程序员可以更方便的了解MySQL服务器的一些性能信息。<br>啥?这四个系统数据库这就介绍完了? 是的，这里只是因为介绍数据目录里遇到了，为了内容的完整性跟大家提一下，具体如何使用还是要参照文档~</p></blockquote></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;数据库和文件系统的关系&quot;&gt;&lt;a href=&quot;#数据库和文件系统的关系&quot; class=&quot;headerlink&quot; title=&quot;数据库和文件系统的关系&quot;&gt;&lt;/a&gt;数据库和文件系统的关系&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;我们知道像 &lt;code&gt;InnoDB&lt;/c</summary>
      
    
    
    
    <category term="MySQL 读书笔记" scheme="http://rymuscle.github.io/categories/MySQL-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="MySQL" scheme="http://rymuscle.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>7.4 主键自增</title>
    <link href="http://rymuscle.github.io/2021/10/20/MySQL%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/7.4%20%E4%B8%BB%E9%94%AE%E8%87%AA%E5%A2%9E/"/>
    <id>http://rymuscle.github.io/2021/10/20/MySQL%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/7.4%20%E4%B8%BB%E9%94%AE%E8%87%AA%E5%A2%9E/</id>
    <published>2021-10-20T09:03:19.000Z</published>
    <updated>2024-04-21T06:19:47.078Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>我们知道，对于一个使用InnoDB存储引擎的表来说，在我们没有显式的创建索引时，表中的数据实际上都是存储在聚簇索引的叶子节点的。<br>而记录又是存储在数据⻚中的，数据⻚和记录又是按照记录主键值从小到大的顺序进行排序，所以如果我们插入的记录的主键值是依次增大的话，那我们每插满一个数据⻚就换到下一个数据⻚继续插。</p><p>而如果我们插入的主键值忽大忽小的话，这就比较麻烦了，假设某个数据⻚存储的记录已经满了，它存储的主键值在1~100之间, 如果此时再插入一条主键值为9的记录，那它插入的位置就如下图::<br><img src="/images/MySQL/7.4/1.png"><br>可这个数据⻚已经满了啊，再插进来咋办呢?<br>我们需要把当前⻚面分裂成两个⻚面，把本⻚中的一些记录移动到新创建的这个⻚中。<br><code>⻚面分裂</code>和<code>记录移位</code>意味着什么?<br>意味着: <code>性能损耗</code>! 所以如果我们想尽量避免这样无谓的性能损耗，最好让插入的记录的主键值依次递增，这样就不会发生这样的性能损耗了。<br>所以我们建议:让主键具有AUTO_INCREMENT，让存储引擎自己为表生成主键，而不是我们手动插入。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;我们知道，对于一个使用InnoDB存储引擎的表来说，在我们没有显式的创建索引时，表中的数据实际上都是存储在聚簇索引的叶子节点的。&lt;br&gt;而记录又是存储在数据⻚中的，数据⻚和记录又是按照记录主键值从小到大的顺序进行排序，所以如果我们插入的记录的主键值</summary>
      
    
    
    
    <category term="MySQL 读书笔记" scheme="http://rymuscle.github.io/categories/MySQL-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="MySQL" scheme="http://rymuscle.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>7.3 如何选择索引</title>
    <link href="http://rymuscle.github.io/2021/10/20/MySQL%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/7.3%20%E5%A6%82%E4%BD%95%E9%80%89%E6%8B%A9%E7%B4%A2%E5%BC%95/"/>
    <id>http://rymuscle.github.io/2021/10/20/MySQL%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/7.3%20%E5%A6%82%E4%BD%95%E9%80%89%E6%8B%A9%E7%B4%A2%E5%BC%95/</id>
    <published>2021-10-20T07:21:31.000Z</published>
    <updated>2024-04-21T06:19:47.076Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>上边我们以 idx_name_birthday_phone_number索引 为例对索引的适用条件进行了详细的唠叨，下边看一下我们在建立索引时或者编写查询语句时就应该注意的一些事项。</p></blockquote><h1 id="考虑列的基数"><a href="#考虑列的基数" class="headerlink" title="考虑列的基数"></a>考虑列的基数</h1><blockquote><p>列的基数指的是某一列中不重复数据的个数，比方说某个列包含值2, 5, 8, 2, 5, 8, 2, 5, 8，虽然有9条记录，但该列的基数却是3。<br>也就是说，在记录行数一定的情况下，列的基数越大，该列中的值越分散，列的基数越小，该列中的值越集中。<br>这个列的基数指标非常重要，直接影响我们是否能有效的利用索引。</p><p>假设某个列的基数为1，也就是所有记录在该列中的值都一样，那为该列建立索引是没有用的，因为所有值都一样就无法排序，无法进行快速查找了~<br>而且如果某个建立了二级索引的列的重复值特别多，那么使用这个二级索引查出的记录还可能要做回表操作，这样性能损耗就更大了。<br>所以结论就是:最好为那些列的基数大的列建立索引，为基数太小列的建立索引效果可能不好。</p></blockquote><h1 id="索引列的类型尽量小"><a href="#索引列的类型尽量小" class="headerlink" title="索引列的类型尽量小"></a>索引列的类型尽量小</h1><blockquote><p>我们在定义表结构的时候要显式的指定列的类型，以整数类型为例，有TINYINT、MEDIUMINT、INT、BIGINT这么几种，它们占用的存储空间依次递增，我们这里所说的类型大小指的就是该类型表示的数据范围的大小。<br>如果我们想要对某个整数列建立索引的话，在表示的整数范围允许的情况下，尽量让索引列使用较小的类型，比如我们能使用INT就不要使用BIGINT，能使用MEDIUMINT就不要使用INT~这是因为:</p><ul><li>数据类型越小，在查询时进行的比较操作越快(这是CPU层次 的东东)</li><li>数据类型越小，索引占用的存储空间就越少，在一个数据⻚内就可以放下更多的记录，从而减少磁盘I&#x2F;O带来的性能损耗， 也就意味着可以把更多的数据⻚缓存在内存中，从而加快读写效率。</li></ul><p>这个建议对于表的主键来说更加适用，因为不仅是聚簇索引中会存储主键值，其他所有的二级索引的节点处都会存储一份记录的主键值， 如果主键适用更小的数据类型，也就意味着节省更多的存储空间和更高效的I&#x2F;O。</p></blockquote><h1 id="索引字符串值的前缀"><a href="#索引字符串值的前缀" class="headerlink" title="索引字符串值的前缀"></a>索引字符串值的前缀</h1><blockquote><p>当我们的字符串很⻓时，存储一个字符串就需要占用很大的存储空间。<br>在我们需要为这个字符串列建立索引时，那就意味着在对应的B+树中有这么两个问题:</p><ul><li>B+树索引中的记录需要把该列的完整字符串存储起来，而且字符串越⻓，在索引中占用的存储空间越大。</li><li>如果B+树索引中索引列存储的字符串很⻓，那在做字符串比较时会占用更多的时间。</li></ul></blockquote><blockquote><p>我们前边儿说过索引列的字符串前缀其实也是排好序的，所以索引的设计者提出了个方案 – 只对字符串的前几个字符进行索引，也就是说在二级索引的记录中只保留字符串前几个字符。<br>这样在查找记录时, 虽然不能精确的定位到记录的位置，但是能定位到相应前缀所在的位置，然后根据前缀相同的记录的主键值回表查询完整的字符串值，再对比就好了。<br>这样只在B+树中存储字符串的前几个字符的编码，既节约空间，又减少了字符串的比较时间，还大概能解决排序的问题，何乐而不为，比方说我们在建表语句中只对name列的前10个字符进行索引可以这么写:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE person_info(</span><br><span class="line">name VARCHAR(100) NOT NULL,</span><br><span class="line">birthday DATE NOT NULL,</span><br><span class="line">phone_number CHAR(11) NOT NULL,</span><br><span class="line">country varchar(100) NOT NULL,</span><br><span class="line">KEY idx_name_birthday_phone_number (name(10),</span><br><span class="line">birthday, phone_number) );</span><br></pre></td></tr></table></figure><p><code>name(10)</code>就表示在建立的B+树索引中只保留记录的前10个字符的编码，这种只索引字符串值的前缀的策略是我们非常鼓励的，尤其是在字符串类型能存储的字符比较多的时候。</p></blockquote><h1 id="索引列前缀对排序的影响"><a href="#索引列前缀对排序的影响" class="headerlink" title="索引列前缀对排序的影响"></a>索引列前缀对排序的影响</h1><blockquote><p>如果使用了 <code>索引列前缀</code>，比方说前边只把name列的前10个字符放到了二级索引中, 下边这个查询可能就有点儿尴尬了:<br><code>SELECT * FROM person_info ORDER BY name LIMIT 10;</code><br>因为二级索引中不包含完整的name列信息，所以无法对前十个字符相同，后边的字符不同的记录进行排序，<strong>也就是使用索引列前缀的方式无法支持使用索引排序，只好乖乖的用文件排序喽</strong> 。</p></blockquote><h1 id="让索引列在比较表达式中单独出现"><a href="#让索引列在比较表达式中单独出现" class="headerlink" title="让索引列在比较表达式中单独出现"></a>让索引列在比较表达式中单独出现</h1><blockquote><p>假设表中有一个整数列my_col，我们为这个列建立了索引。下边的两个WHERE子句虽然语义是一致的，但是在效率上却有差别:<br><code>WHERE my_col * 2 &lt; 4</code><br><code>WHERE my_col &lt; 4/2</code><br>第1个WHERE子句中my_col列并不是以单独列的形式出现的，而是以<code>my_col * 2</code>这样的表达式的形式出现的，存储引擎会依次遍历所有的记录，计算这个表达式的值是不是小于4，所以这种情况下是使用不到为my_col列建立的B+树索引的。<br>而第2个WHERE子句中my_col列是以单独列的形式出现的，这样的情况可以直接使用B+树索引。</p><p>所以结论就是:如果索引列在比较表达式中不是以单独列的形式出现，而是以某个表达式，或者函数调用形式出现的话，是用不到索引的。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;上边我们以 idx_name_birthday_phone_number索引 为例对索引的适用条件进行了详细的唠叨，下边看一下我们在建立索引时或者编写查询语句时就应该注意的一些事项。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;考虑列的基数</summary>
      
    
    
    
    <category term="MySQL 读书笔记" scheme="http://rymuscle.github.io/categories/MySQL-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="MySQL" scheme="http://rymuscle.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>7.2 回表的代价与覆盖索引</title>
    <link href="http://rymuscle.github.io/2021/10/16/MySQL%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/7.2%20%E5%9B%9E%E8%A1%A8%E7%9A%84%E4%BB%A3%E4%BB%B7%E4%B8%8E%E8%A6%86%E7%9B%96%E7%B4%A2%E5%BC%95/"/>
    <id>http://rymuscle.github.io/2021/10/16/MySQL%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/7.2%20%E5%9B%9E%E8%A1%A8%E7%9A%84%E4%BB%A3%E4%BB%B7%E4%B8%8E%E8%A6%86%E7%9B%96%E7%B4%A2%E5%BC%95/</id>
    <published>2021-10-16T15:01:19.000Z</published>
    <updated>2024-04-21T06:19:47.073Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>之前我们在谈到<code>回表</code>这个词时，多是一带而过，可能大家没啥深刻的体会，下边我们详细唠叨下。<br>还是用idx_name_birthday_phone_number索引为例，看下边这个查询:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM person_info WHERE name &gt; &#x27;Asa&#x27; AND name &lt; &#x27;Barlow&#x27;;</span><br></pre></td></tr></table></figure><p>在使用idx_name_birthday_phone_number索引进行查询时大致可以分为这两个步骤:</p><blockquote><ol><li>从索引idx_name_birthday_phone_number对应的B+树中取出name值在Asa~Barlow之间的用户记录。</li><li>由于索引idx_name_birthday_phone_number对应的B+树用户记录中只包含name、age、birthday、id这4个字段， 而查询列表是*，意味着要查询表中所有字段，也就是还要包括country字段。<br>这时需要把从上一步中获取到的每一条记录的id字段都到聚簇索引对应的B+树中找到完整的用户记录，也就是我们通常所说的<code>回表</code>，然后把完整的用户记录返回给查询用户。</li></ol></blockquote></blockquote><blockquote><p>由于索引idx_name_birthday_phone_number对应的B+树中的记录首先会按照name列的值进行排序，所以值在Asa~Barlow之间的记录在磁盘中的存储是相连的，集中分布在一个或几个数据⻚中， 我们可以很快的把这些连着的记录从磁盘中读出来，这种读取方式我们也可以称为顺序I&#x2F;O。<br>根据第1步中获取到的记录的id字段的值可能并不相连，而在聚簇索引中记录是根据id(也就是主键)的顺序排列的，所以根据这些并不连续的id值到聚簇索引中访问完整的用户记录可能分布在不同的数据⻚中，这样读取完整的用户记录可能要访问更多的数据⻚，这种读取方式我们也可以称为随机I&#x2F;O。<br>一般情 况下，顺序I&#x2F;O比随机I&#x2F;O的性能高很多，所以步骤1的执行可能很快，而步骤2就慢一些。<br>所以这个使用索 引idx_name_birthday_phone_number的查询有这么两个特点:</p><ul><li>会使用到两个B+树索引，一个二级索引，一个聚簇索引。</li><li>访问二级索引使用顺序I&#x2F;O，访问聚簇索引使用随机I&#x2F;O。</li></ul></blockquote><blockquote><p>需要回表的记录越多，使用二级索引的性能就越低，甚至让某些查询宁愿使用全表扫描也不使用二级索引。<br>比方说name值在Asa ~Barlow之间的用户记录数量占全部记录数量90%以上，那么如果使用idx_name_birthday_phone_number索引的话，有90%多的id值需要回表，这不是吃力不讨好么，还不如直接去扫描聚簇索引 (也就是全表扫描)。</p></blockquote><blockquote><p>那什么时候采用<code>全表扫描</code>的方式，什么使用采用 <code>二级索引 + 回表</code> 的方式去执行查询呢?<br>这个就是传说中的<code>查询优化器</code>做的工作，查询优化器会事先对表中的记录计算一些统计数据，然后再利用这些统计数据根据查询的条件来计算一下需要回表的记录数，需要回表的记录数越多，就越倾向于使用全表扫描，反之倾向于使用二级索引 + 回表 的方式。当然优化器做的分析工作不仅仅是这么简单，但是大致上是个这个过程。<br>一般情况下，<strong>限制查询获取较少的记录数</strong>会让优化器更倾向于选择使用 <code>二级索引 + 回表</code> 的方式进行查询，因为回表的记录越少，性能提升就越高，比方说上边的查询可以改写成这样:<br><code>SELECT * FROM person_info WHERE name &gt; &#39;Asa&#39; AND name &lt; &#39;Barlow&#39; LIMIT 10;</code><br>添加了LIMIT 10的查询更容易让优化器采用二级索引 + 回表的方 式进行查询。</p></blockquote><blockquote><p>对于有排序需求的查询，上边讨论的采用 <code>全表扫描</code> 还是 <code>二级索引 + 回表</code> 的方式进行查询的条件也是成立的，比方说下边这个查询:<br><code>SELECT * FROM person_info ORDER BY name, birthday, phone_number;</code><br>由于查询列表是*，所以如果使用二级索引进行排序的话，需要把排序完的二级索引记录全部进行回表操作，这样操作的成本还不如直接遍历聚簇索引然后再进行文件排序(filesort)低，所以优化器会倾向于使用全表扫描的方式执行查询。<br>如果我们加了LIMIT子句，比如这样:<br><code>SELECT * FROM person_info ORDER BY name, birthday, phone_number LIMIT 10;</code><br>这样需要回表的记录特别少，优化器就会倾向于使用 <code>二级索引 + 回表</code> 的方式执行查询。</p></blockquote><h1 id="覆盖索引"><a href="#覆盖索引" class="headerlink" title="覆盖索引"></a>覆盖索引</h1><blockquote><p>为了彻底告别回表操作带来的性能损耗，我们建议: 最好在查询列表里只包含索引列，比如这样:<br><code>SELECT name, birthday, phone_number FROM person_info WHERE name &gt; &#39;Asa&#39; AND name &lt; &#39;Barlow&#39;</code><br>因为我们只查询name, birthday, phone_number这三个索引列的值，所以在通过idx_name_birthday_phone_number索引得到结果后就不必到聚簇索引中再查找记录的剩余列，也就是country列的值了，这样就省去了回表操作带来的性能损耗。<br>我们把这种只需要用到索引的查询方式称为<code>索引覆盖</code>。</p></blockquote><blockquote><p>排序操作也优先使用覆盖索引的 方式进行查询，比方说这个查询:<br><code>SELECT name, birthday, phone_number FROM person_info ORDER BY name, birthday, phone_number;</code><br>虽然这个查询中没有LIMIT子句，但是采用了覆盖索引，所以查询优化器就会直接使用idx_name_birthday_phone_number索引进行排序而不需要回表操作了。</p><p>当然，如果业务需要查询出索引以外的列，那还是以保证业务需求为重。<br>但是我们很不鼓励用*号作为查询列表，最好把我们需要查询的列依次标明。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;之前我们在谈到&lt;code&gt;回表&lt;/code&gt;这个词时，多是一带而过，可能大家没啥深刻的体会，下边我们详细唠叨下。&lt;br&gt;还是用idx_name_birthday_phone_number索引为例，看下边这个查询:&lt;/p&gt;
&lt;figure class</summary>
      
    
    
    
    <category term="MySQL 读书笔记" scheme="http://rymuscle.github.io/categories/MySQL-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="MySQL" scheme="http://rymuscle.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>7.1 索引的使用及注意事项</title>
    <link href="http://rymuscle.github.io/2021/10/16/MySQL%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/7.1%20%E7%B4%A2%E5%BC%95%E7%9A%84%E4%BD%BF%E7%94%A8%E5%8F%8A%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/"/>
    <id>http://rymuscle.github.io/2021/10/16/MySQL%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/7.1%20%E7%B4%A2%E5%BC%95%E7%9A%84%E4%BD%BF%E7%94%A8%E5%8F%8A%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</id>
    <published>2021-10-16T13:05:37.000Z</published>
    <updated>2024-04-21T06:19:47.069Z</updated>
    
    <content type="html"><![CDATA[<h1 id="测试数据表准备"><a href="#测试数据表准备" class="headerlink" title="测试数据表准备"></a>测试数据表准备</h1><p>B+树索引并不是万能的，并不是所有的查询语句都能用到我们建立的索引。</p><blockquote><p>为了故事的顺利发展，我们需要先创建一个 用户基本信息 表:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE person_info(</span><br><span class="line">id INT NOT NULL auto_increment,</span><br><span class="line">name VARCHAR(100) NOT NULL,</span><br><span class="line">birthday DATE NOT NULL,</span><br><span class="line">phone_number CHAR(11) NOT NULL,</span><br><span class="line">country varchar(100) NOT NULL,</span><br><span class="line">PRIMARY KEY (id),</span><br><span class="line">KEY idx_name_birthday_phone_number (name,</span><br><span class="line">birthday, phone_number) );</span><br></pre></td></tr></table></figure><p>对于这个person_info表我们需要注意两点:</p><ul><li>表中的主键是id列，它存储一个自动递增的整数。所以InnoDB存储引擎会自动为id列建立<code>聚簇索引</code>。 </li><li>我们额外定义了一个<code>二级索引</code> idx_name_birthday_phone_number，它是由3个列组成的联合索引。 所以在这个索引对应的B+树的叶子节点处存储的用户记录只保留name、birthday、phone_number这三个列的值以及主键id的值，并不会保存country列的值。</li></ul></blockquote><blockquote><p>person_info表会为 <code>聚簇索引</code> 和 <code>idx_name_birthday_phone_number索引</code> 建立2棵B+树<br>下边我们画一下索引idx_name_birthday_phone_number的示意图，不过既然我们已经掌握了InnoDB的B+树索引原理，那我们在画图的时候为了让图更加清晰，所以在省略一些不必要的部分，比如记录的额外信息，各⻚面的⻚号等等，其中内节点中目录项记录的⻚号信息我们用箭头来代替，在记录结构中只保 留name、birthday、phone_number、id这四个列的真实数据值，所以示意图就⻓这样:<br><img src="/images/MySQL/7.1/1.png"><br>为了方便大家理解，我们特意标明了哪些是内节点，哪些是叶子节点。<br>再次强调一下，<code>内节点</code>中存储的是<code>目录项记录</code>，<code>叶子节点</code>中存储的是<code>用户记录</code>(由于不是聚簇索引，所以用户记录是不完整的，缺少country列的值)。</p></blockquote><blockquote><p>从图中可以看出，这个 idx_name_birthday_phone_number 索引对应的B+树中⻚面和记录的排序方式就是这样的:</p><ul><li>先按照name列的值进行排序。</li><li>如果name列的值相同，则按照birthday列的值进行排序。</li><li>如果birthday列的值也相同，则按照phone_number的值进行排序。<br>这个排序方式十分、特别、非常、巨、very very very重要，因为只要⻚面和记录是排好序的，我们就可以通过二分法来快速定位查找。</li></ul><p>下边的内容都仰仗这个图了，大家对照着图理解。</p></blockquote><h1 id="全值匹配"><a href="#全值匹配" class="headerlink" title="全值匹配"></a>全值匹配</h1><p>当我们的 <code>where搜索条件</code> 中的列和 <code>索引列</code> 一致的话，这种情况就称为<code>全值匹配</code>，比方说下边这个查找语句:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM person_info WHERE name = &#x27;Ashburn&#x27; AND birthday = &#x27;1990-09-27&#x27; AND phone_number = &#x27;15123983239&#x27;;</span><br></pre></td></tr></table></figure><p>我们建立的 <code>idx_name_birthday_phone_number索引</code> 包含的3个列在这个查询语句中都展现出来了。</p><blockquote><p>大家可以想象一下这个查询过程:</p><ul><li>因为B+树的<code>数据⻚</code>和<code>记录</code>先是按照name列的值进行排序的， 所以先可以很快定位name列的值是Ashburn的记录位置。</li><li>在name列相同的记录里又是按照birthday列的值进行排序的，所以在name列的值是Ashburn的记录里又可以快速定位birthday列的值是’1990-09-27’的记录。</li><li>如果很不幸，name和birthday列的值都是相同的，那记录是按照phone_number列的值排序的，所以<code>联合索引中的三个列都可能被用到</code>。</li></ul></blockquote><blockquote><p>有的同学也许有个疑问，如果调换WHERE子句中的几个搜索条件的顺序对查询结果有啥影响么? 比方说写成下边这样:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM person_info WHERE birthday = &#x27;1990- 09-27&#x27; AND phone_number = &#x27;15123983239&#x27; AND name = &#x27;Ashburn&#x27;;</span><br></pre></td></tr></table></figure><p>答案是: 没影响哈。MySQL有一个叫<code>查询优化器</code>的东东，会分析这些搜索条件并且按照可以使用的索引中列的顺序来决定先使用哪个搜索条件，后使用哪个搜索条件。我们后边儿会有专⻔的章节来介绍查询 优化器，敬请期待。</p></blockquote><h1 id="匹配左边的列"><a href="#匹配左边的列" class="headerlink" title="匹配左边的列"></a>匹配左边的列</h1><blockquote><p>其实在我们的搜索语句中也可以不用包含全部联合索引中的列，<code>只包含左边</code> 的就行，比方说下边的查询语句:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM person_info WHERE name = &#x27;Ashburn&#x27;;</span><br><span class="line">或者</span><br><span class="line">SELECT * FROM person_info WHERE name = &#x27;Ashburn&#x27; AND birthday = &#x27;1990-09-27&#x27;;</span><br><span class="line"></span><br></pre></td></tr></table></figure></blockquote><blockquote><p>那为什么搜索条件中必须出现左边的列才可以使用到这个B+树索引呢? 比如下边的语句就用不到这个B+树索引么?</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM person_info WHERE birthday = &#x27;1990-09-27&#x27;;</span><br></pre></td></tr></table></figure><p>是的，的确用不到，因为B+树的数据⻚和记录先是按照name列的值排序的，在name列的值相同的情况下才使用birthday列进行排序，也就是说name列的值不同的记录中birthday的值可能是无序的。<br>而现在你跳过name列直接根据birthday的值去查找，臣妾做 不到呀~</p></blockquote><blockquote><p>那如果我就想在只使用birthday的值去通过B+树索引进行查找咋办呢?这好办，你再对birthday列建一个B+树索引就行了。</p></blockquote><blockquote><p>但是需要特别注意的一点是，如果我们想使用联合索引中尽可能多的列，搜索条件中的各个列必须是联合索引中从最左边连续的列。<br>比方说联合索引idx_name_birthday_phone_number中列的定义顺序是name、birthday、phone_number，如果我们的搜索条件中只有name和phone_number，而没有中间的birthday，比方说这样:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT * FROM person_info WHERE name = &#x27;Ashburn&#x27; AND phone_number = &#x27;15123983239&#x27;;</span><br></pre></td></tr></table></figure><p>这样只能用到name列的索引，birthday和phone_number的索引就用不上了，因为name值相同的记录先按照birthday的值进行排序，birthday值相同的记录才按照phone_number值进行排序。</p></blockquote><h1 id="匹配列前缀"><a href="#匹配列前缀" class="headerlink" title="匹配列前缀"></a>匹配列前缀</h1><blockquote><p>我们前边说过为某个列建立索引的意思其实就是 <code>在对应的B+树的记录中使用该列的值进行排序</code><br>比方说person_info表上建立的联合索引idx_name_birthday_phone_number会先用name列的值进行排序，所以这个联合索引对应的B+树中的记录的name列的排列就是这样的:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Aaron</span><br><span class="line">Aaron</span><br><span class="line">...</span><br><span class="line">Aaron</span><br><span class="line">Asa</span><br><span class="line">Ashburn</span><br><span class="line">...</span><br><span class="line">Ashburn</span><br><span class="line">Baird</span><br><span class="line">Barlow</span><br><span class="line">...</span><br><span class="line">Barlow</span><br></pre></td></tr></table></figure><p>字符串排序的本质就是比较哪个字符串大一点儿，一般的比较规则都是逐个比较字符的大小，也就是说我们比较两个字符串的大小的过程其实是这样的:</p><ul><li>先比较字符串的第一个字符，第一个字符小的那个字符串就比较小。</li><li>如果两个字符串的第一个字符相同，那就再比较第二个字符， 第二个字符比较小的那个字符串就比较小。</li><li>如果两个字符串的第二个字符也相同，那就接着比较第三个字符，依此类推。</li></ul><p>也就是说这些字符串的前n个字符，也就是前缀都是排好序的， <strong>所以对于字符串类型的索引列来说，我们只匹配它的前缀也是可以快速定位记录的</strong> 。</p></blockquote><blockquote><p>比方说我们想查询名字以’As’开头的记录，那就可以这么写查询语句:<br>SELECT * FROM person_info WHERE name LIKE ‘As%’;<br>但是需要注意的是，如果只给出后缀或者中间的某个字符串，比如这样:<br>SELECT * FROM person_info WHERE name LIKE ‘%As%’;<br>MySQL就无法快速定位记录位置了，因为字符串中间有’As’的字符串并没有排好序， <strong>所以只能<code>全表扫描</code>了</strong> 。</p></blockquote><h1 id="匹配范围值"><a href="#匹配范围值" class="headerlink" title="匹配范围值"></a>匹配范围值</h1><blockquote><p>回头看我们idx_name_birthday_phone_number索引的B+树示意图，所有记录都是按照索引列的值从小到大的顺序排好序的，所以这极大的方便我们查找索引列的值在某个范围内的记录。</p><p>比方说查询语句: <code>SELECT * FROM person_info WHERE name &gt; &#39;Asa&#39; AND name &lt; &#39;Barlow&#39;;</code><br>由于B+树中的数据⻚和记录是先按name列排序的，所以我们上边的查询过程其实是这样的:<br>找到name值为Asa的记录。<br>找到name值为Barlow的记录。<br>哦啦，由于所有记录都是由链表连起来的(记录之间用单链表，数据⻚之间用双链表)，所以他们之间的记录都可以很容易的取出来喽~<br>找到这些记录的主键值，再到<code>聚簇索引</code>中<code>回表</code>查找完整的记录。</p></blockquote><blockquote><p>不过在使用联合索引进行范围查找的时候需要注意，如果对多个列同时进行范围查找的话，只有对索引最左边的那个列进行范围查找的时候才能用到B+树索引，比方说这样:<br><code>SELECT * FROM person_info WHERE name &gt; &#39;Asa&#39; AND name &lt; &#39;Barlow&#39; AND birthday &gt; &#39;1980-01-01&#39;;</code><br>上边这个查询可以分成两个部分:</p><ol><li>通过条件name &gt; ‘Asa’ AND name &lt; ‘Barlow’来对name进行范围，查找的结果可能有多条name值不同的记录</li><li>对这些name值不同的记录继续通过 birthday &gt; ‘1980-01-01’条件继续过滤</li></ol></blockquote><blockquote><p>这样子对于联合索引idx_name_birthday_phone_number来说，只能用到name列的部分，而用不到birthday列的部分，因为只有name值相同的情况下才能用birthday列的值进行排序，而这个查询中通过name进行范围查找的记录中可能并不是按照birthday列进行排序的，所以在搜索条件中继续以birthday列进行查找时是用不到这个B+树索引的。</p></blockquote><h1 id="精确匹配某一列并范围匹配另外一列"><a href="#精确匹配某一列并范围匹配另外一列" class="headerlink" title="精确匹配某一列并范围匹配另外一列"></a>精确匹配某一列并范围匹配另外一列</h1><blockquote><p>对于同一个联合索引来说，虽然对多个列都进行范围查找时只能用到最左边那个索引列，但是如果左边的列是精确查找，则右边的列可以进行范围查找，比方说这样:<br><code>SELECT * FROM person_info WHERE name = &#39;Ashburn&#39; AND birthday &gt; &#39;1980-01-01&#39; AND birthday &lt; &#39;2000- 12-31&#39; AND phone_number &gt; &#39;15100000000&#39;;</code><br>name &#x3D; ‘Ashburn’，对name列进行精确查找，当然可以使用B+树索引了。<br>birthday &gt; ‘1980-01-01’ AND birthday &lt; ‘2000- 12-31’，由于name列是精确查找，所以通过name &#x3D; ‘Ashburn’条件查找后得到的结果的name值都是相同的，它们会再按照birthday的值进行排序。所以此时对birthday 列进行范围查找是可以用到B+树索引的。<br>phone_number &gt; ‘15100000000’，通过birthday的范围查找的记录的birthday的值可能不同，所以这个条件无法再利用B+树索引了，只能遍历上一步查询得到的记录。</p></blockquote><h1 id="用于排序-（注意-文件排序-英文名-filesort-）"><a href="#用于排序-（注意-文件排序-英文名-filesort-）" class="headerlink" title="用于排序 （注意 文件排序(英文名:filesort)）"></a>用于排序 （注意 文件排序(英文名:filesort)）</h1><blockquote><p>我们在写查询语句的时候经常需要对查询出来的记录通过 ORDER BY 子句按照某种规则进行排序。</p><ul><li>一般情况下，我们只能把记录都加载到内存中，再用一些排序算法，比如快速排序、归并排序、吧啦吧啦排序……</li><li>在内存中对这些记录进行排序，有的时候可能<strong>查询的结果集太大以至于不能在内存中进行排序的话</strong>，还可能暂时借助磁盘的空间来存放中间结果，排序操作完成后再把排好序的结果集返回到客户端。</li></ul></blockquote><blockquote><p>在MySQL中，把这种<code>在内存中或者磁盘上进行排序的方式统称为 文件排序(英文名:filesort)</code>，跟文件这个词儿一沾边儿，就显得这些排序操作非常慢了。<br>但是如果ORDER BY子句里使用到了我们的索引列，就有可能省去在内存或文件中排序的步骤，比如下边这个简单的查询语句:<br><code>SELECT * FROM person_info ORDER BY name, birthday, phone_number LIMIT 10;</code><br>这个查询的结果集需要先按照name值排序，如果记录的name值相同，则需要按照birthday来排序，如果birthday的值相同，则需要按照phone_number排序。<br>大家可以回过头去看我们建立的 idx_name_birthday_phone_number 索引的示意图，<strong>因为这个B+树索引本身就是按照上述规则排好序的，所以直接从索引中提取数据</strong>，然后进行回表操作取出该索引中不包含的列就好了。<br>简单吧? 是的，索引就是这么牛逼。 （lant:如果用到索引，你就不用再次排序了。）</p></blockquote><blockquote><p>Tips:<br>请注意，本例的查询语句中加了limit子句，这是因为如果不限制需要获取的记录数量，会导致为大量二级索引记录执行回表操作，这样会影响整体的查询性能。<br>关于回表操作造成的影响，我们后续再聊。</p></blockquote><h2 id="使用联合索引进行排序注意事项"><a href="#使用联合索引进行排序注意事项" class="headerlink" title="使用联合索引进行排序注意事项"></a>使用联合索引进行排序注意事项</h2><blockquote><p>对于联合索引有个问题需要注意，ORDER BY的子句后边的列的顺序也必须按照索引列的顺序给出，如果给出ORDER BY phone_number, birthday, name的顺序，那也是用不了B+树索引，这种颠倒顺序就不能使用索引的原因我们上边详细说过了，这就不赘述了。</p></blockquote><blockquote><p>当联合索引左边列的值为常量，也可以使用后边的列进行排序，比如这样:<br><code>SELECT * FROM person_info WHERE name = &#39;A&#39; ORDER BY birthday, phone_number LIMIT 10;</code><br>这个查询能使用联合索引进行排序是因为name列的值相同的记录是按照birthday, phone_number排序的，说了好多遍了都。</p></blockquote><h2 id="不可以使用索引进行排序的几种情况"><a href="#不可以使用索引进行排序的几种情况" class="headerlink" title="不可以使用索引进行排序的几种情况"></a>不可以使用索引进行排序的几种情况</h2><h3 id="ASC、DESC混用"><a href="#ASC、DESC混用" class="headerlink" title="ASC、DESC混用"></a>ASC、DESC混用</h3><blockquote><p>对于使用联合索引进行排序的场景，我们要求各个排序列的排序顺序是一致的，也就是要么各个列都是ASC规则排序，要么都是DESC规则排序。<br>为啥会有这种奇葩规定呢? 这个还得回头想想这个idx_name_birthday_phone_number联合索引中记录的结构:</p><ul><li>先按照记录的name列的值进行升序排列。 </li><li>如果记录的name列的值相同，再按照birthday列的值进行升序排列。</li><li>如果记录的birthday列的值相同，再按照phone_number列的值进行升序排列。</li></ul></blockquote><blockquote><p>如果查询中的各个排序列的排序顺序是一致的，比方说下边这两种情况:<br><code>ORDER BY name, birthday LIMIT 10</code> : 这种情况直接从索引的最左边开始往右读10行记录就可以了。<br><code>ORDER BY name DESC, birthday DESC LIMIT 10</code>: 这种情况直接从索引的最右边开始往左读10行记录就可以了。</p></blockquote><blockquote><p>但是如果我们查询的需求是先按照name列进行升序排列，再按照birthday列进行降序排列的话，比如说这样的查询语句:<br><code>SELECT * FROM person_info ORDER BY name ASC, birthday DESC LIMIT 10;</code><br>这样就不能高效使用索引，而要采取更复杂的算法去从索引中取数据，设计MySQL的大叔觉得这样还不如直接文件排序来的快，所以就规定使用联合索引的各个排序列的排序顺序必须是一致的。</p></blockquote><h3 id="WHERE子句中出现非排序使用到的索引列"><a href="#WHERE子句中出现非排序使用到的索引列" class="headerlink" title="WHERE子句中出现非排序使用到的索引列"></a>WHERE子句中出现非排序使用到的索引列</h3><blockquote><p>如果WHERE子句中出现了非排序使用到的索引列，那么排序依然是使用不到索引的，比方说这样:<br><code>SELECT * FROM person_info WHERE country = &#39;China&#39; ORDER BY name LIMIT 10;</code><br>这个查询只能先把符合搜索条件country &#x3D; ‘China’的记录提取出来(这个筛选本身就用不到索引)后再进行排序。<br>注意和下边这个查询作区别:<br><code>SELECT * FROM person_info WHERE name = &#39;A&#39; ORDER BY birthday, phone_number LIMIT 10;</code><br>虽然这个查询也有搜索条件，但是name &#x3D; ‘A’可以使用到索引 idx_name_birthday_phone_number，而且过滤剩下的记录还是按照birthday、phone_number列排序的，所以还是可以使用索引进行排序的。</p></blockquote><h3 id="排序列包含非同一个索引的列"><a href="#排序列包含非同一个索引的列" class="headerlink" title="排序列包含非同一个索引的列"></a>排序列包含非同一个索引的列</h3><blockquote><p>有时候用来排序的多个列不是一个索引里的，这种情况也不能使用索引进行排序，比方说:<br><code>SELECT * FROM person_info ORDER BY name, country LIMIT 10;</code><br>name和country并不属于一个联合索引中的列，所以无法使用索引进行排序，至于为啥我就不想再唠叨了，自己用前边的理论自己捋一捋把~</p></blockquote><p>&#x2F;&#x2F; TODO: 为什么不能先用 order by name 索引先拿出10条记录，然后用这10条记录的主键id再去回表取到country列，然后再在内存中做 order by country 呢？<br>&#x2F;&#x2F; 哦： 这样在内存中进行排序，其实就是 文件排序了，也就是说还要你重新再排序，并没有使用到现成排好序的索引。</p><h3 id="排序列使用了复杂的表达式"><a href="#排序列使用了复杂的表达式" class="headerlink" title="排序列使用了复杂的表达式"></a>排序列使用了复杂的表达式</h3><blockquote><p>要想使用索引进行排序操作，必须保证索引列是以单独列的形式出现，而不是修饰过的形式，比方说这样:<br><code>SELECT * FROM person_info ORDER BY UPPER(name) LIMIT 10;</code><br>使用了UPPER函数修饰过的列就不是单独的列啦，这样就无法使用索引进行排序啦。</p></blockquote><h1 id="用于分组"><a href="#用于分组" class="headerlink" title="用于分组"></a>用于分组</h1><blockquote><p>有时候我们为了方便统计表中的一些信息，会把表中的记录按照某些列进行分组。比如下边这个分组查询:<br><code>SELECT name, birthday, phone_number, COUNT(*) FROM person_info GROUP BY name, birthday, phone_number</code></p></blockquote><blockquote><p>这个查询语句相当于做了3次分组操作:</p><ul><li>先把记录按照name值进行分组，所有name值相同的记录划分为一组。</li><li>将每个name值相同的分组里的记录再按照birthday的值进行分组，将birthday值相同的记录放到一个小分组里，所以看起来就像在一个大分组里又化分了好多小分组。</li><li>再将上一步中产生的小分组按照phone_number的值分成更小的分组，所以整体上看起来就像是先把记录分成一个大分组，然后把大分组分成若干个小分组，然后把若干个小分组再细分成更多的小小分组。</li><li>然后针对那些小小分组进行统计，比如在我们这个查询语句中就是统计每个小小分组包含的记录条数。</li></ul><p>如果没有索引的话，这个分组过程全部需要在内存里实现，而如果有了索引的话，恰巧这个分组顺序又和我们的B+树中的索引列的顺序是一致的，而我们的B+树索引又是按照索引列排好序的，这不正好么，所以可以直接使用B+树索引进行分组。</p></blockquote><blockquote><p>和使用B+树索引进行排序是一个道理，分组列的顺序也需要和索引列的顺序一致，也可以只使用索引列中左边的列进行分组。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;测试数据表准备&quot;&gt;&lt;a href=&quot;#测试数据表准备&quot; class=&quot;headerlink&quot; title=&quot;测试数据表准备&quot;&gt;&lt;/a&gt;测试数据表准备&lt;/h1&gt;&lt;p&gt;B+树索引并不是万能的，并不是所有的查询语句都能用到我们建立的索引。&lt;/p&gt;
&lt;blockquote</summary>
      
    
    
    
    <category term="MySQL 读书笔记" scheme="http://rymuscle.github.io/categories/MySQL-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="MySQL" scheme="http://rymuscle.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>7.0 回顾B+树索引的本质</title>
    <link href="http://rymuscle.github.io/2021/10/16/MySQL%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/7.0%20%E5%9B%9E%E9%A1%BEB+%E6%A0%91%E7%B4%A2%E5%BC%95%E7%9A%84%E6%9C%AC%E8%B4%A8/"/>
    <id>http://rymuscle.github.io/2021/10/16/MySQL%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/7.0%20%E5%9B%9E%E9%A1%BEB+%E6%A0%91%E7%B4%A2%E5%BC%95%E7%9A%84%E6%9C%AC%E8%B4%A8/</id>
    <published>2021-10-16T11:15:21.000Z</published>
    <updated>2024-04-21T06:19:47.067Z</updated>
    
    <content type="html"><![CDATA[<h1 id="回顾-B-树的索引本质"><a href="#回顾-B-树的索引本质" class="headerlink" title="回顾 B+树的索引本质"></a>回顾 B+树的索引本质</h1><p>我们前边非常详细地唠叨了InnoDB存储引擎的B+树索引， 我们必须熟悉下边这些结论:</p><ul><li>每个索引都对应一棵B+树，B+树分为好多层，最下边一层是<code>叶子节点</code>，其余的是<code>内节点</code>。</li><li><code>所有用户记录</code>都存储在B+树的<code>叶子节点</code>，<code>所有目录项记录</code>都存储在<code>内节点</code>。</li><li>InnoDB存储引擎会自动为主键(如果没有它会自动帮我们添加)建立<code>聚簇索引</code>，聚簇索引的叶子节点包含完整的用户记录。</li><li>我们可以为自己感兴趣的列建立<code>二级索引</code>，二级索引的叶子节点包含的用户记录由 <code>索引列+主键</code> 组成，所以如果想通过二级索引来查找完整的用户记录的话，需要通过<code>回表操作</code>，也就是在通过二级索引找到主键值之后再到聚簇索引中查找完整的用户记录。</li><li>B+树中每层节点(页)都是按照索引列值从小到大的顺序排序而组成了<code>双向链表</code>；<br>而且每个⻚内的记录(不论是用户记录还是目录项记录)都是按照索引列的值从小到大的顺序而形成了一个<code>单链表</code>。</li><li>如果是联合索引的话，则⻚面和记录先按照联合索引前边的列排序，如果该列值相同，再按照联合索引后边的列排序。</li><li>通过索引查找记录是从B+树的根节点开始，一层一层向下搜索。由于每个⻚面都按照索引列的值建立了 Page Directory(⻚目录)，所以在这些⻚面内的查找非常快。</li></ul><p>如果你读上边的几点结论有些任何一点点疑惑的话，那下边的内容不适合你，回过头先去看前边的内容去。</p><h1 id="索引的代价"><a href="#索引的代价" class="headerlink" title="索引的代价"></a>索引的代价</h1><p>在熟悉了B+树索引原理之后，本篇文章的主题是唠叨如何更好的使用索引，虽然索引是个好东⻄，可不能乱建，在介绍如何更好的使用索引之前先要了解一下使用这玩意儿的代价，它在空间和时间上都会拖后腿:</p><p>空间上的代价</p><blockquote><p>这个是显而易⻅的，每建立一个索引都要为它建立一棵B+树， 每一棵B+树的每一个节点都是一个数据⻚，一个⻚默认会占用16KB的存储空间，一棵很大的B+树由许多数据⻚组成，那可是很大的一片存储空间呢。</p></blockquote><p>时间上的代价</p><blockquote><p>每次对表中的数据进行增、删、改操作时，都需要去修改各个B+树索引。<br>因为B+树每层节点都是按照索引列的值从小到大的顺序排序而组成了<code>双向链表</code>。<br>不论是<code>叶子节点中的记录</code>，还是<code>内节点中的记录</code>(也就是不论是用户记录还是目录项记录)都是按照索引列的值从小到大的顺序而形成了一个<code>单向链表</code>。</p><p>而增、删、改操作可能会对节点和记录的排序造成破坏，所以存储引擎需要额外的时间进行一些记录移位，<code>⻚面分裂</code>、<code>⻚面回收</code>啥的操作来维护好节点和记录的排序。</p><p>如果我们建了许多索引，每个索引对应的B+树都要进行相关的维护操作，这还能不给性能拖后腿么?</p></blockquote><p>所以说，一个表上索引建的越多，就会占用越多的存储空间，在增删改记录的时候性能就越差。为了能建立又好又少的索引，我们先得学学这些索引在哪些条件下起作用的。</p><h1 id="B-树索引适用的条件"><a href="#B-树索引适用的条件" class="headerlink" title="B+树索引适用的条件"></a>B+树索引适用的条件</h1><p>接下来将唠叨许多种让B+树索引发挥最大效能的技巧和注意事项。<br>不过大家要清楚，所有的技巧都是源自你对B+树索引本质的理解，所以如果你还不能保证对B+树索引充分的理解，那么再次建议回过头把前边的内容看完了再来，要不然读文章对你来说是一种折磨。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;回顾-B-树的索引本质&quot;&gt;&lt;a href=&quot;#回顾-B-树的索引本质&quot; class=&quot;headerlink&quot; title=&quot;回顾 B+树的索引本质&quot;&gt;&lt;/a&gt;回顾 B+树的索引本质&lt;/h1&gt;&lt;p&gt;我们前边非常详细地唠叨了InnoDB存储引擎的B+树索引， 我们必须</summary>
      
    
    
    
    <category term="MySQL 读书笔记" scheme="http://rymuscle.github.io/categories/MySQL-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="MySQL" scheme="http://rymuscle.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>6.8 索引基本操作</title>
    <link href="http://rymuscle.github.io/2021/10/14/MySQL%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/6.8%20%E7%B4%A2%E5%BC%95%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/"/>
    <id>http://rymuscle.github.io/2021/10/14/MySQL%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/6.8%20%E7%B4%A2%E5%BC%95%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</id>
    <published>2021-10-14T12:29:53.000Z</published>
    <updated>2024-04-21T06:19:47.061Z</updated>
    
    <content type="html"><![CDATA[<p>小结:</p><blockquote><p>InnoDB和MyISAM会自动为主键或者声明为UNIQUE的列去自动建立B+树索引。</p><p>但是如果我们想为其他的列建立索引就需要我们显式的去指明。</p><p>为啥不自动为每个列都建立个索引呢?<br>别忘了，每建立一个索引都会建立一棵B+树，每插入一条记录都要维护各个记录、数据⻚的排序关系，这是很费性能和存储空间的。</p></blockquote><p>创建、修改、删除 <code>索引</code>:</p><blockquote><p>我们可以在创建表的时候指定需要建立索引的单个列或者建立联合索引的多个列:</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CREATE TALBE 表名 ( 各种列的信息 ··· ,</span><br><span class="line">[KEY|INDEX] 索引名 (需要被索引的单个列或多个列) )</span><br></pre></td></tr></table></figure><blockquote><p>其中的KEY和INDEX是同义词，任意选用一个就可以。</p></blockquote><blockquote><p>我们也可以在 修改表结构的时候添加索引</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE 表名 ADD [INDEX|KEY] 索引名 (需要被索引的 单个列或多个列);</span><br></pre></td></tr></table></figure><blockquote><p>也可以在修改表结构的时候删除索引: </p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE 表名 DROP [INDEX|KEY] 索引名;</span><br></pre></td></tr></table></figure><p>我们创建的<code>索引名</code>名称可以随便起，不过我们还是建议以<code>idx_为前缀</code>，后边跟着需要建立索引的<code>列名</code>，多个列名之间用<code>下划线_</code>分隔开。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;小结:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;InnoDB和MyISAM会自动为主键或者声明为UNIQUE的列去自动建立B+树索引。&lt;/p&gt;
&lt;p&gt;但是如果我们想为其他的列建立索引就需要我们显式的去指明。&lt;/p&gt;
&lt;p&gt;为啥不自动为每个列都建立个索引呢?&lt;br&gt;别忘了，每</summary>
      
    
    
    
    <category term="MySQL 读书笔记" scheme="http://rymuscle.github.io/categories/MySQL-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="MySQL" scheme="http://rymuscle.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>6.7 MyISAM中的索引方案简单介绍</title>
    <link href="http://rymuscle.github.io/2021/10/14/MySQL%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/6.7%20MyISAM%E4%B8%AD%E7%9A%84%E7%B4%A2%E5%BC%95%E6%96%B9%E6%A1%88%E7%AE%80%E5%8D%95%E4%BB%8B%E7%BB%8D/"/>
    <id>http://rymuscle.github.io/2021/10/14/MySQL%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/6.7%20MyISAM%E4%B8%AD%E7%9A%84%E7%B4%A2%E5%BC%95%E6%96%B9%E6%A1%88%E7%AE%80%E5%8D%95%E4%BB%8B%E7%BB%8D/</id>
    <published>2021-10-14T12:19:26.000Z</published>
    <updated>2024-04-21T06:19:47.054Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>前面我们介绍的都是InnoDB存储引擎中的索引方案，为了内容的完整性以及各位可能在面试时遇到这类的问题，我们有必要再简单介绍一下MyISAM存储引擎中的索引方案。</p></blockquote><blockquote><p>我们知道InnoDB中 <strong><code>索引即数据</code></strong> ，也就是<code>聚簇索引</code>的那棵B+树的叶子节点中已经把所有完整的用户记录都包含了。<br>而MyISAM的索引方案虽然也使用树形结构，但是却将<code>索引和数据分开存储</code>:</p></blockquote><p>MyISAM的数据文件：</p><blockquote><p>它将表中的记录按照记录的插入顺序单独存储在一个文件中，称之为<code>数据文件</code>。<br>这个文件并不划分为若干个数据⻚，有多少记录就往这个文件中塞多少记录就成了。<br>我们可以通过<code>行号</code>而快速访问到一条记录。</p></blockquote><p>MyISAM的索引文件：</p><blockquote><ul><li>使用MyISAM存储引擎的表, 会把索引信息另外存储到一个称为 <code>索引文件</code> 的另一个文件中<br>MyISAM会单独为表的主键创建一个索引，只不过在索引的叶子节点中存储的不是完整的用户记录，而是 <code>主键值+行号</code> 的组合。<br>也就是先通过索引找到对应的<code>行号</code>，再通过行号去找对应的记录!<br>这一点和InnoDB是完全不相同的，在InnoDB存储引擎中，如果是根据主键查找数据，我们只需要根据主键值对聚簇索引进行一次查找就能找到对应的记录；而在MyISAM中却需要进行一次<code>回表操作</code>，意味着MyISAM中建立的索引相当于全部都是二级索引!</li><li>如果有需要的话，我们也可以对其它的列分别建立索引或者建立联合索引，原理和InnoDB中的索引差不多，不过在叶子节点处存储的是 相应的列+行号。这些索引也全部都是二级索引。</li></ul></blockquote><blockquote><p>Tips:<br>小贴士:<br>MyISAM的行格式有<code>定长记录格式(Static)</code>、<code>变长记录格式 (Dynamic)</code>、<code>压缩记录格式(Compressed)</code>。<br>如果数据表采用的市<code>定长记录格式</code>，也就是一条记录占用存储空间的大小是固定的，这样就可以轻松算出某条记录在数据文件中的 <code>地址偏移量</code>。<br>但是<code>变长记录格式</code>就不行了，MyISAM会直接在索引<code>叶子节</code>点处存储该条记录在数据文件中的地址偏移量。<br>通过这个可以看出， <strong><code>MyISAM的回表操作是十分快速的</code></strong> ，因为是拿着地址偏移量直接到文件中取数据的，反观InnoDB是通过获取主键之后再去聚簇索引里边儿找记录，虽然说也不慢，但还是比不上直接用地址去访问。</p></blockquote><p>此处我们只是非常简要的介绍了一下MyISAM的索引，具体细节全拿出来又可以写一篇文章了。这里只是希望大家理解InnoDB中的索引即数据，数据即索引，而MyISAM中却是索引是索引、数据是数据。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;前面我们介绍的都是InnoDB存储引擎中的索引方案，为了内容的完整性以及各位可能在面试时遇到这类的问题，我们有必要再简单介绍一下MyISAM存储引擎中的索引方案。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;我们知道Inno</summary>
      
    
    
    
    <category term="MySQL 读书笔记" scheme="http://rymuscle.github.io/categories/MySQL-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="MySQL" scheme="http://rymuscle.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>6.6 InnoDB B+树索引 注意事项</title>
    <link href="http://rymuscle.github.io/2021/10/13/MySQL%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/6.6%20InnoDB%20B+%E6%A0%91%E7%B4%A2%E5%BC%95%20%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/"/>
    <id>http://rymuscle.github.io/2021/10/13/MySQL%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/6.6%20InnoDB%20B+%E6%A0%91%E7%B4%A2%E5%BC%95%20%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</id>
    <published>2021-10-13T14:21:36.000Z</published>
    <updated>2024-04-21T06:19:47.052Z</updated>
    
    <content type="html"><![CDATA[<h1 id="根⻚面万年不动窝"><a href="#根⻚面万年不动窝" class="headerlink" title="根⻚面万年不动窝"></a>根⻚面万年不动窝</h1><p>我们前边介绍B+树索引时，为了大家理解上的方便，先把 <code>存储用户记录</code>的<code>叶子节点</code>都画出来，然后接着画 <code>存储目录项记录</code> 的<code>内节点</code>，实际上B+树的形成过程是这样的:</p><blockquote><p>每当为某个表创建一个B+树索引(<code>聚簇索引不是人为创建的， 默认就有</code>)时，<code>都会为这个索引创建一个根节点⻚面</code>。</p><ul><li>最开始表中没有数据时，每个B+树索引对应的<code>根节点</code>中既没有<code>用户记录</code>，也没有<code>目录项记录</code>。</li><li>随后向表中插入用户记录时，先把<code>用户记录</code>存储到这个 <code>根节点</code> 中。</li><li>当 <code>根节点</code> 中的可用空间用完时继续插入记录，此时会将<code>根节点</code>中的所有记录复制到一个新分配的⻚，比如⻚a中，然后对这个新⻚进行<code>⻚分裂</code>(lant:这个算是正常的页分裂)的操作，得到另一个新⻚，比如⻚b。这时新插入的记录根据键值(也就是聚簇索引中的主键值，二级索引中对应的索引列的值)的大小就会被分配到⻚a或者⻚b中，**而<code>根节点</code>便升级为<code>存储目录项记录的⻚</code>**。</li></ul></blockquote><p>这个过程需要大家特别注意的是: <strong><code>一个B+树索引的根节点自诞生之日起，便不会再移动</code></strong> 。 这样只要我们对某个表建立一个索引，那么 <strong><code>它的根节点的⻚号便会被记录到某个地方，然后凡是InnoDB存储引擎需要用到这个索引的时候，都会从那个固定的地方取出根节点的⻚号，从而来访问这个索引</code></strong> 。</p><h1 id="内节点中目录项记录的唯一性"><a href="#内节点中目录项记录的唯一性" class="headerlink" title="内节点中目录项记录的唯一性"></a>内节点中目录项记录的唯一性</h1><p>我们知道B+树索引的 <code>内节点</code> 中 <code>目录项记录</code>的内容是 <code>索引列+⻚号</code> 的搭配，但是这个搭配对于二级索引来说有点儿不严谨。</p><blockquote><p>还拿index_demo表为例，假设这个表中的数据是这样的:<br>c1  c2  c3<br>1   1   ‘u’<br>3   1   ‘d’<br>5   1   ‘y’<br>7   1   ‘a’<br>如果二级索引中<code>目录项记录</code>的内容只是 <code>索引列 + ⻚号</code> 的搭配的话， 那么为c2列建立索引后的B+树应该⻓这样:<br><img src="/images/MySQL/6.6/1.jpg"></p><p>如果我们想新插入一行记录(其中c1、c2、c3的值分别是:9、1、’c’)，那么在修改这个为c2列建立的二级索引对应的B+树时便碰到了个大问题: 由于⻚3中存储的目录项记录是由 <code>c2列+⻚号的值</code> 构成的，⻚3中的两条目录项记录对应的c2列的值都是1，而我们新插入的这条记录的c2列的值也是1，那我们这条新插入的记录到底应该放到⻚4中，还是⻚5中啊? 答案是: <code>对不起，懵逼了</code>。</p></blockquote><blockquote><p>为了让新插入记录能找到自己在哪个⻚里，我们需要保证 <strong><code>在B+树的同一层 内节点 的 目录项记录 除⻚号这个字段外，其他字段(作为一个整体)应该是唯一的</code></strong> 。所以其实二级索引的<code>内节点</code>(<code>目录项记录页</code>)中的<code>目录项记录</code>的内容实际上是由三个部分构成的:</p><ul><li><code>索引列的值</code></li><li><code>主键值</code></li><li><code>⻚号</code></li></ul><p>也就是我们把<code>主键值</code>也添加到<code>二级索引</code>的<code>内节点</code>中的<code>目录项记录</code>了，这样就能保证 **<code>在B+树的同一层 内节点 的 目录项记录 除⻚号这个字段外，其他字段(作为一个整体)应该是唯一的</code>**，所以我们为c2列建立二级索引后的示意图实际上应该是:<br><img src="/images/MySQL/6.6/2.png"><br>这样我们再插入记录(9, 1, ‘c’)时，由于⻚3中存储的<code>目录项记录</code>是由 <code>c2列 + 主键 + ⻚号</code> 的值构成的，可以先把新记录的c2列的值和⻚3中各目录项记录的c2列的值作比较，如果c2列的值相同的话，可以接着比较主键值，因为B+树同一层中不同目录项记录的 <code>c2 列 + 主键</code> 的值肯定是不一样的，所以最后肯定能定位唯一的一条目录项记录，在本例中最后确定新记录应该被插入到⻚5中。</p></blockquote><h1 id="一个⻚面最少存储2条记录"><a href="#一个⻚面最少存储2条记录" class="headerlink" title="一个⻚面最少存储2条记录"></a><del>一个⻚面最少存储2条记录</del></h1>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;根⻚面万年不动窝&quot;&gt;&lt;a href=&quot;#根⻚面万年不动窝&quot; class=&quot;headerlink&quot; title=&quot;根⻚面万年不动窝&quot;&gt;&lt;/a&gt;根⻚面万年不动窝&lt;/h1&gt;&lt;p&gt;我们前边介绍B+树索引时，为了大家理解上的方便，先把 &lt;code&gt;存储用户记录&lt;/code&gt;</summary>
      
    
    
    
    <category term="MySQL 读书笔记" scheme="http://rymuscle.github.io/categories/MySQL-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="MySQL" scheme="http://rymuscle.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>6.5 InnoDB 的联合索引</title>
    <link href="http://rymuscle.github.io/2021/10/13/MySQL%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/6.5%20InnoDB%20%E7%9A%84%E8%81%94%E5%90%88%E7%B4%A2%E5%BC%95/"/>
    <id>http://rymuscle.github.io/2021/10/13/MySQL%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/6.5%20InnoDB%20%E7%9A%84%E8%81%94%E5%90%88%E7%B4%A2%E5%BC%95/</id>
    <published>2021-10-13T13:19:37.000Z</published>
    <updated>2024-04-15T07:09:52.814Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>我们也可以同时以多个列的大小作为排序规则，也就是同时为多个列建立索引。<br>比方说我们想让B+树按照c2和c3列的大小进行排序,这个包含两层含义:</p><ul><li>先把各个记录和⻚按照c2列进行排序；</li><li>在记录的c2列相同的情况下，采用c3列进行排序；</li></ul></blockquote><blockquote><p>为c2和c3列建立的联合索引的示意图如下：<br><img src="/images/MySQL/6.5/1.jpg"></p><p>如图所示，我们需要注意以下几点:</p><ul><li>每条<code>目录项记录</code>都由 <code>c2、c3、⻚号</code> 这三个部分组成，各条记录先按照c2列的值进行排序，如果记录的c2列相同，则按照c3列的值进行排序。<br>  B+树叶子节点处的用户记录由 <code>c2、c3、主键c1列</code>组成。</li><li>千万要注意一点，以c2和c3列的大小为排序规则建立的B+树称为<code>联合索引</code>，本质上也是一个二级索引。它的意思与分别为c2和c3列分别建立索引的表述是不同的，建立联合索引只会建立如上图一样的1棵B+树。而为c2和c3列分别建立索引会分别以c2和c3列的大小为排序规则建立2棵B+树</li></ul></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;我们也可以同时以多个列的大小作为排序规则，也就是同时为多个列建立索引。&lt;br&gt;比方说我们想让B+树按照c2和c3列的大小进行排序,这个包含两层含义:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;先把各个记录和⻚按照c2列进行排序；&lt;/li&gt;
&lt;li&gt;在记录的c2列相</summary>
      
    
    
    
    <category term="MySQL 读书笔记" scheme="http://rymuscle.github.io/categories/MySQL-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="MySQL" scheme="http://rymuscle.github.io/tags/MySQL/"/>
    
  </entry>
  
  <entry>
    <title>6.4 InnoDB 的 二级索引及其回表操作</title>
    <link href="http://rymuscle.github.io/2021/10/06/MySQL%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/6.4%20InnoDB%20%E7%9A%84%20%E4%BA%8C%E7%BA%A7%E7%B4%A2%E5%BC%95%E5%8F%8A%E5%85%B6%E5%9B%9E%E8%A1%A8%E6%93%8D%E4%BD%9C/"/>
    <id>http://rymuscle.github.io/2021/10/06/MySQL%E7%9F%A5%E8%AF%86%E7%82%B9%E6%95%B4%E7%90%86/6.4%20InnoDB%20%E7%9A%84%20%E4%BA%8C%E7%BA%A7%E7%B4%A2%E5%BC%95%E5%8F%8A%E5%85%B6%E5%9B%9E%E8%A1%A8%E6%93%8D%E4%BD%9C/</id>
    <published>2021-10-06T14:04:19.000Z</published>
    <updated>2024-04-15T07:07:26.359Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>之前介绍的 <code>聚簇索引</code> <strong>只能在搜索条件是主键值时才能发挥作用</strong> 😓，因为B+树中的记录都是<code>按照主键进行排序</code>的。</p></blockquote><h1 id="二级索引"><a href="#二级索引" class="headerlink" title="二级索引"></a>二级索引</h1><blockquote><p>如果我们想以别的列作为搜索条件该咋办呢? 难道只能从头到尾沿着链表依次遍历记录么? 🤔</p><p>不，我们可以多建几棵B+树，<code>不同的B+树中的数据采用不同的排序规则</code> ✅。</p></blockquote><blockquote><p>比方说我们用c2列的大小作为数据⻚、⻚中记录的排序规则，再建一棵B+树，效果如下图所示:<br><img src="/images/MySQL/6.4/1.jpg"><br>这个B+树与上边介绍的<code>聚簇索引</code>有几处不同:</p><ul><li><p>使用记录c2列的大小进行 <code>记录</code> 和 <code>⻚</code> 的排序，这包括三个方面的含义:</p></li><li><ol><li><code>⻚内的记录</code>是按照c2列的大小顺序排成一个<code>单向链表</code>；</li></ol></li><li><ol start="2"><li>存放用户记录的<code>⻚</code>之间也是根据⻚中记录的c2列大小顺序排成一个<code>双向链表</code>；</li></ol></li><li><ol start="3"><li>存放<code>目录项记录</code>的<code>⻚</code>分为不同的层次，在同一层次中的⻚也是根据⻚中目录项记录的c2列大小顺序排成一个<code>双向链表</code>。</li></ol></li><li><p>B+树的叶子节点存储的并不是完整的用户记录，而只是 c2列 +主键 这两个列的值；</p></li><li><p><code>目录项记录</code>中不再是主键+⻚号的搭配，而变成了 c2列+⻚号的 搭配；</p></li></ul></blockquote><blockquote><p>所以如果我们现在想通过c2列的值查找某些记录的话就可以使用我们刚刚建好的这个B+树了。</p><p>以查找c2列的值为4的记录为例，查找过程如下:</p><ul><li>确定目录项记录⻚<br>根据根⻚面，也就是⻚44，可以快速定位到目录项记录所在的⻚为⻚42(因为2 &lt; 4 &lt; 9)。</li><li>通过目录项记录⻚确定用户记录真实所在的⻚。<br>在⻚42中可以快速定位到实际存储用户记录的⻚，但是由于c2列并没有唯一性约束，所以c2列值为4的记录可能分布在多个数据⻚中，又因为2 &lt; 4 ≤ 4，所以确定实际存储用户记录的⻚在⻚34和⻚35中。<br>在真实存储用户记录的⻚中定位到具体的记录。<br>  到⻚34和⻚35中定位到具体的记录。<br>  但是这个B+树的叶子节点中的记录只存储了c2和c1(也就是主键)两个列，所以我们<code>必须再根据主键值去聚簇索引中再查找一遍完整的用户记录</code>。</li></ul></blockquote><h1 id="二级索引需要回表哦"><a href="#二级索引需要回表哦" class="headerlink" title="二级索引需要回表哦"></a>二级索引需要回表哦</h1><blockquote><p>各位看到上面步骤4的操作了么?<br>我们根据这个以c2列大小排序的B+树只能确定我们要查找记录的主键值，所以如果我们想根据c2列的值查找到完整的用户记录的话，仍然需要到<code>聚簇索引</code>中再查一遍， 这个过程也被称为<code>回表</code>。</p></blockquote><blockquote><p><strong><code>也就是根据c2列的值查询一条完整的用户记录需要使用到2棵B+树!!!</code></strong></p></blockquote><blockquote><p>为什么我们还需要一次回表操作呢?直接把完整的用户记录放到叶子节点不就好了么?</p><p>你说的对，如果把完整的用户记录放到叶子节点是可以不用回表，但是太占地方了呀~<br>相当于每建立一棵B+树都需要把所有的用户记录再都拷⻉一遍，这就有点太浪费存储空间了。</p><p>因为 这种按照非主键列建立的B+树需要一次回表操作才可以定位到完整的用户记录，所以这种B+树也被称为二级索引(英文名secondary index)，或者辅助索引。由于我们使用的是c2列的大小作为B+树 的排序规则，所以我们也称这个B+树为为c2列建立的索引。</p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;之前介绍的 &lt;code&gt;聚簇索引&lt;/code&gt; &lt;strong&gt;只能在搜索条件是主键值时才能发挥作用&lt;/strong&gt; 😓，因为B+树中的记录都是&lt;code&gt;按照主键进行排序&lt;/code&gt;的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;</summary>
      
    
    
    
    <category term="MySQL 读书笔记" scheme="http://rymuscle.github.io/categories/MySQL-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
    <category term="MySQL" scheme="http://rymuscle.github.io/tags/MySQL/"/>
    
  </entry>
  
</feed>
